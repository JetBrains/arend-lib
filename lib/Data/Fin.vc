\open ::Combinators

\data Fin (n : Nat)
    | Fin (suc n) => fzero
    | Fin (suc n) => fsuc (Fin n)

\function
to-nat {n : Nat} (x : Fin n) : Nat <= \elim n, x
    | suc _, fzero => zero
    | suc _, fsuc x => suc $ to-nat x

\function
from-nat (n : Nat) : Fin (suc n) <= \elim n
    | suc n' => fsuc $ from-nat n'
    | zero => fzero

\open ::Data::Nat::Base ((+))

\function
flift {n : Nat} (m : Nat) (fn : Fin n) : Fin (n + m) <= \elim n, fn
    | suc n', fzero => fzero
    | suc n', fsuc fn' => fsuc (flift m fn')

\function
fadd {n : Nat} (m : Nat) (fn : Fin n) : Fin (m + n) <= \elim m
    | zero => fn
    | suc m' => fsuc (fadd m' fn)

-- \function
-- inf-fin {n : Nat} (x : Fin n) : \Type0 <= Fin (to-nat x)
