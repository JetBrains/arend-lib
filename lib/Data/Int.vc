\open ::HedbergTheorem
\open ::Paths
\open ::Data::Nat::Properties
\open ::Data::Either
\open ::Logic
\open ::Combinators

\data Int : \Set0
  | pos Nat
  | neg Nat
\with
  | neg zero => pos zero

\function
zeroZ => pos zero

\function
sucZ (x : Int) : Int <= \elim x
   | pos n => pos (suc n)   
   | neg (suc n) => neg n

\function
predZ (x : Int) : Int <= \elim x
   | pos (suc n) => pos n
   | pos zero => neg (suc zero)
   | neg n => neg (suc n)

\function
absZ (x : Int) : Nat <= \elim x
   | pos n => n
   | neg n => n

\function
negZ (n : Int) : Int <= \elim n
   | pos n => neg n
   | neg n => pos n

\function \infixl 6
(+$) (n m : Int) : Int <= \elim n
  | pos zero => m
  | pos (suc n) => sucZ ((pos n) +$ m)
  | neg zero => m
  | neg (suc n) => predZ ((neg n) +$ m)

\function \infixl 6
(-$) (n m : Int) => n +$ negZ m

\function \infixl 7
(*$) (n m : Int) : Int <= \elim n
  | pos zero => pos zero
  | pos (suc n) => (pos n) *$ m +$ m
  | neg zero => neg zero
  | neg (suc n) => (neg n) *$ m -$ m

{-
\function
zero-neqZ (n : Nat) : ((pos (suc n) != zeroZ) && (neg (suc n) != zeroZ)) => (\lam (p-eq : pos (suc n) = zeroZ) => zero-ne-suc (inv (pmap absZ p-eq)), \lam (p-eq : pos (suc n) = zeroZ) => zero-ne-suc (inv (pmap absZ p-eq)))
-}

\function 
sucZ-predZ-linv (x : Int) : (predZ (sucZ x) = x) <= \elim x
	| pos n => idpe (pos n)
	| neg (suc n) => idpe (neg (suc n))

\function 
sucZ-predZ-rinv (x : Int) : (sucZ (predZ x) = x) <= \elim x
	| pos (suc n) => idpe (pos (suc n))
	| neg n => idpe (neg n)
	| pos zero => idpe (pos zero)

--  (_ : decidable-eq (pos l) (predZ m))

\function
Int-decEq (n : Int) (m : Int) : (Dec (n = m)) <= 
\elim n, m
   | pos (suc l), m => (\case (Int-decEq (pos l) (predZ m))
     	      	    	      	    | inr p-eq => inr (pos (suc l) ==< pmap sucZ p-eq >== sucZ (predZ m) ==< sucZ-predZ-rinv m >== m !qed)
				    | inl p-neq => inl (\lam (p-eq : pos (suc l) = m) => p-neq (pos l ==< pmap predZ p-eq >== predZ m !qed)))
   | pos zero, pos zero => inr idp 
   | pos zero, pos (suc l) => inl (\lam (p-eq : pos zero = pos (suc l)) => zero-ne-suc (pmap absZ p-eq))				   
   | pos zero, neg (suc l) => inl (\lam (p-eq : pos zero = neg (suc l)) => zero-ne-suc (pmap absZ p-eq))	
   | neg (suc l), m => \case (Int-decEq (neg l) (sucZ m))
     	      	    	      	    | inr p-eq => inr (neg (suc l) ==< pmap predZ p-eq >== predZ (sucZ m) ==< sucZ-predZ-linv m >== m !qed)
				    | inl p-neq => inl (\lam (p-eq : neg (suc l) = m) => p-neq (neg l ==< pmap sucZ p-eq >== sucZ m !qed))

{- -}

\function
Int-isSet => Hedberg-thm (\lam (n m : Int) => Int-decEq n m)
