\open ::Paths \hiding (concat)
\open ::Data::Empty
\open ::Data::List

\function
cons-nil-not-equal {A : \Type0} (x : A) (xs : List A) (p : x :-: xs = nil) : Empty => transport (\lam xs => ::Data::Bool.True (::Data::Bool.not (null xs))) p ::Data::Unit.unit

\function
snoc-nil-not-equal {A : \Type0} (xs : List A) (x : A) (p : snoc xs x = nil) : Empty <= \elim xs
    | nil => cons-nil-not-equal x nil p
    | (:-:) x' xs' => cons-nil-not-equal x' (snoc xs' x) p

\function
cons-injective {A : \Type0} (x y : A) (xs ys : List A) (p : x :-: xs = y :-: ys) : \Sigma (x = y) (xs = ys)
    => (pmap (headDefault x) p, pmap tail p)

\function
snoc-injective {A : \Type0} (xs ys : List A) (x y : A) (p : snoc xs x = snoc ys y) : \Sigma (xs = ys) (x = y) <= \elim xs, ys
    | nil, nil => (idp, (cons-injective x y nil nil p).1)
    | nil, (:-:) y' ys' => absurd (snoc-nil-not-equal ys' y (inv (cons-injective x y' nil (snoc ys' y) p).2))
    | (:-:) x' xs', nil => absurd (snoc-nil-not-equal xs' x (cons-injective x' y (snoc xs' x) nil p).2)
    | (:-:) x' xs', (:-:) y' ys' => \let | s1 => cons-injective x' y' (snoc xs' x) (snoc ys' y) p
                                       | s2 => snoc-injective xs' ys' x y s1.2
                                  \in (pmap2 (:-:) s1.1 s2.1, s2.2)

\function
append-assoc {A : \Type0} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) <= \elim xs
    | nil => idp
    | (:-:) x xs => pmap2 (:-:) (idpe x) (append-assoc xs ys zs)

\function
append-nil-right {A : \Type0} (xs : List A) : xs ++ nil = xs <= \elim xs
    | nil => idp
    | (:-:) x xs => pmap2 (:-:) (idpe x) (append-nil-right xs)

\function
right-identity-unique {A : \Type0} (xs ys : List A) (p : xs = xs ++ ys) : ys = nil <= \elim xs
    | nil => inv p
    | (:-:) x xs => right-identity-unique xs ys (cons-injective x x xs (xs ++ ys) p).2

\function
left-identity-unique {A : \Type0} (xs ys : List A) (p : xs = ys ++ xs) : ys = nil <= \elim xs, ys
    | _, nil => idp
    | nil, (:-:) y ys => absurd (cons-nil-not-equal y (ys ++ nil) (inv p))
    | (:-:) x xs, (:-:) y ys => \let | p1 : x :-: xs = y :-: snoc ys x ++ xs   => p *> inv (append-assoc (y :-: ys) (singleton x) xs)
                                   | p2 : snoc ys x = nil                  => left-identity-unique xs (snoc ys x) (cons-injective x y xs ((ys ++ singleton x) ++ xs) p1).2
                              \in absurd (snoc-nil-not-equal ys x p2)

\function
map-append-commute {A B : \Type0} (f : A -> B) (xs ys : List A) : map f (xs ++ ys) = map f xs ++ map f ys <= \elim xs
    | nil => idp
    | (:-:) x xs => pmap ((:-:) (f x)) (map-append-commute f xs ys)

\open ::Data::Nat::Base
\open ::Data::Nat::Properties

\function
sum-append-commute (xs ys : List Nat) : sum (xs ++ ys) = sum xs + sum ys <= \elim xs
    | nil => idp
    | (:-:) x xs =>
        x + sum (xs ++ ys)      ==< pmap ((+) x) (sum-append-commute xs ys) >==
        x + (sum xs + sum ys)   ==< inv (plus-assoc x (sum xs) (sum ys))    >==
        sum (x :-: xs) + sum ys  !qed

\function
foldr-universal {A B : \Type0} (h : List A -> B) (f : A -> B -> B) (e : B) (base : h nil = e) (step : \Pi (x : A) (xs : List A) -> h (x :-: xs) = f x (h xs)) (xs : List A) : h xs = foldr f e xs <= \elim xs
    | nil => base
    | (:-:) x xs =>
        h (x :-: xs)         ==< step x xs >==
        f x (h xs)          ==< pmap (f x) (foldr-universal h f e base step xs) >==
        f x (foldr f e xs)  !qed

\function
foldr-fusion {A B C : \Type0} (h : B -> C) (f : A -> B -> B) (g : A -> C -> C) (e : B) (fuse : \Pi (x : A) (y : B) -> h (f x y) = g x (h y)) : \Pi (xs : List A) -> h (foldr f e xs) = foldr g (h e) xs
    => foldr-universal (\lam xs => h (foldr f e xs)) g (h e) idp (\lam (x : A) (xs : List A) => fuse x (foldr f e xs))

\function
id-is-foldr {A : \Type0} : \Pi (xs : List A) -> xs = foldr (:-:) nil xs
    => foldr-universal (\lam xs => xs) (:-:) nil idp (\lam _ _ => idp)

\function
append-is-foldr {A : \Type0} (xs ys : List A) =>
    xs ++ ys                ==< pmap (\lam xs => xs ++ ys) (id-is-foldr xs)                                     >==
    foldr (:-:) nil xs ++ ys ==< foldr-fusion (\lam xs => xs ++ ys) (:-:) (:-:) (List A).nil (\lam _ _ => idp) xs  >==
    foldr (:-:) ys xs        !qed

\function
map-is-foldr {A B : \Type0} (f : A -> B) (xs : List A) =>
    map f xs                                        ==< pmap (map f) (id-is-foldr xs)                                               >==
    map f (foldr (:-:) (List A).nil xs)              ==< foldr-fusion (map f) (:-:) (\lam x ys => f x :-: ys) nil (\lam _ _ => idp) xs >==
    foldr (\lam x ys => f x :-: ys) (List B).nil xs  !qed

\function
concat-map {A B : \Type0} (f : A -> B) (xs : List (List A)) =>
    concat (map (map f) xs)                                 ==< pmap (concat {B}) (map-is-foldr (map f) xs)                                                                                             >==
    concat (foldr (\lam xs ys => map f xs :-: ys) nil xs)    ==< foldr-fusion {_} {List (List B)} {List B} concat (\lam xs ys => map f xs :-: ys) (\lam ys zs => map f ys ++ zs) nil (\lam _ _ => idp) xs >==
    foldr (\lam ys zs => map f ys ++ zs) nil xs             ==< inv (foldr-fusion (map f) (++) (\lam ys zs => map f ys ++ zs) nil (map-append-commute f) xs)                                            >==
    map f (concat xs)                                       !qed

\function
map-id {A : \Type0} (xs : List A) =>
    map (\lam x => x) xs ==< map-is-foldr (\lam x => x) xs  >==
    foldr (:-:) nil xs    ==< inv (id-is-foldr xs)           >==
    xs                   !qed

\function
map-compose {A B C : \Type0} (g : B -> C) (f : A -> B) (xs : List A) =>
    map (\lam x => g (f x)) xs                              ==< pmap (map (\lam (x : A) => g (f x))) (id-is-foldr xs)                                                                   >==
    map (\lam x => g (f x)) (foldr (:-:) (List A).nil xs)    ==< foldr-fusion {_} {List A} {List C} (map (\lam x => g (f x))) (:-:) (\lam a y => g (f a) :-: y) nil (\lam _ _ => idp) xs   >==
    foldr (\lam a y => g (f a) :-: y) nil xs                 ==< inv (foldr-fusion (map g) (\lam a y => f a :-: y) (\lam a y => g (f a) :-: y) nil (\lam _ _ => idp) xs)                   >==
    map g (foldr (\lam a y => f a :-: y) nil xs)             ==< pmap (map g) (inv (map-is-foldr f xs))                                                                                  >==
    map g (map f xs)                                        !qed

\function
foldr-pmap {A B : \Type0} (f1 f2 : A -> B -> B) (e1 e2 : B) (p : \Pi (x : A) (y : B) -> f1 x y = f2 x y) (q : e1 = e2) (xs : List A) =>
    foldr f1 e1 xs                  ==< pmap (foldr f1 e1) (id-is-foldr xs)                                                 >==
    foldr f1 e1 (foldr (:-:) nil xs) ==< foldr-fusion (foldr f1 e1) (:-:) f2 nil (\lam (x : A) xs => p x (foldr f1 e1 xs)) xs >==
    foldr f2 e1 xs                  !qed

\function
map-pmap {A B : \Type0} (f g : A -> B) (p : \Pi (x : A) -> f x = g x) (xs : List A) =>
    map f xs                                ==< map-is-foldr f xs                                     >==
    foldr (\lam x ys => f x :-: ys) nil xs   ==< foldr-pmap {_} {List B} (\lam x ys => f x :-: ys) (\lam x ys => g x :-: ys) nil nil (\lam x ys => pmap2 (:-:) (p x) (idpe ys)) idp xs >==
    foldr (\lam x ys => g x :-: ys) nil xs   ==< inv (map-is-foldr g xs)                               >==
    map g xs                                !qed

\function
take-append-drop {A : \Type0} (n : Nat) (xs : List A) : take n xs ++ drop n xs = xs <= \elim n, xs
    | zero, _ => idp
    | suc n, nil => idp
    | suc n, (:-:) x xs => pmap ((:-:) x) (take-append-drop n xs)

\function
length-map {A B : \Type0} (f : A -> B) (xs : List A) : length (map f xs) = length xs <= \elim xs
    | nil => idp
    | (:-:) x xs => pmap suc (length-map f xs)

\function
length-remove {A : \Type0} (x : A) (xs ys : List A) : suc (length (xs ++ ys)) = length (xs ++ x :-: ys) <= \elim xs
    | nil => idp
    | (:-:) x' xs' => pmap suc (length-remove x xs' ys)

\function
length-append {A : \Type0} (xs ys : List A) : length (xs ++ ys) = length xs + length ys <= \elim xs
    | nil => idp
    | (:-:) x xs => pmap suc (length-append xs ys)

{-
\function
length-gfilter {A B : \Type0} (p : A -> Maybe B) (xs : List A) : length (gfilter p xs) `lessEq` length xs <= \elim xs
    | nil => zero-lessEq
    | (:-:) x xs => maybe (step-lessEq (length-gfilter p xs)) (suc-lessEq (length-gfilter p xs)) (p x)
-}

\function
unfold-reverse {A : \Type0} (x : A) (xs : List A) : reverse (x :-: xs) = snoc (reverse xs) x => go xs (singleton x)
  \where
    \function
    go {A : \Type0} (ys xs : List A) : foldl (\lam xs x => x :-: xs) ys xs = reverse ys ++ xs <= \elim ys
        | nil => idp
        | (:-:) y ys =>
            foldl (\lam xs x => x :-: xs) ys (y :-: xs)   ==< go ys (y :-: xs)                                          >==
            reverse ys ++ y :-: xs                       ==< inv (append-assoc (reverse ys) (singleton y) xs)         >==
            snoc (reverse ys) y ++ xs                   ==< inv (pmap (\lam zs => zs ++ xs) (go ys (singleton y)))   >==
            reverse (y :-: ys) ++ xs                     !qed

\function
reverse-append-commute {A : \Type0} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs <= \elim xs
    | nil => inv (append-nil-right (reverse ys))
    | (:-:) x xs =>
        reverse (x :-: xs ++ ys)             ==< unfold-reverse x (xs ++ ys)                                 >==
        snoc (reverse (xs ++ ys)) x         ==< pmap (\lam zs => snoc zs x) (reverse-append-commute xs ys)  >==
        snoc (reverse ys ++ reverse xs) x   ==< append-assoc (reverse ys) (reverse xs) (singleton x)        >==
        reverse ys ++ (snoc (reverse xs) x) ==< inv (pmap ((++) (reverse ys)) (unfold-reverse x xs))        >==
        reverse ys ++ reverse (x :-: xs)     !qed

\function
reverse-map-commute {A B : \Type0} (f : A -> B) (xs : List A) : map f (reverse xs) = reverse (map f xs) <= \elim xs
    | nil => idp
    | (:-:) x xs =>
        map f (reverse (x :-: xs))       ==< pmap (map f) (unfold-reverse x xs)                       >==
        map f (snoc (reverse xs) x)     ==< map-append-commute f (reverse xs) (singleton x)          >==
        snoc (map f (reverse xs)) (f x) ==< pmap (\lam y => snoc y (f x)) (reverse-map-commute f xs) >==
        snoc (reverse (map f xs)) (f x) ==< inv (unfold-reverse (f x) (map f xs))                    >==
        reverse (map f (x :-: xs))       !qed

\function
reverse-involutive {A : \Type0} (xs : List A) : reverse (reverse xs) = xs <= \elim xs
    | nil => idp
    | (:-:) x xs =>
        reverse (reverse (x :-: xs))     ==< pmap reverse (unfold-reverse x xs)                  >==
        reverse (snoc (reverse xs) x)   ==< reverse-append-commute (reverse xs) (singleton x)   >==
        x :-: reverse (reverse (xs))     ==< pmap ((:-:) x) (reverse-involutive xs)               >==
        x :-: xs                         !qed
