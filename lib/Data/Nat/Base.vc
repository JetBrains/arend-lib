\open ::Combinators

\function
pred (x : Nat) : Nat <= \elim x
    | zero => 0
    | suc x' => x'

\function \infixl 6
(+) (x y : Nat) : Nat <= \elim x
    | zero => y
    | suc x' => suc $ x' + y

\function \infixl 7
(*) (x y : Nat) : Nat <= \elim x
    | zero => zero
    | suc x' => y + (x' * y)

\function \infixl 6
(-) (x y : Nat) : Nat <= \elim y
    | zero => x
    | suc y' => pred $ x - y'

\function
(=<) (n m : Nat) => n - m = 0

\function \infix 4
(<) (n m : Nat) => suc n =< m

\function \infix 4
(>) (n m : Nat) => m < n

\data \infix 4
Le (n m : Nat)
  | Le zero m => le_z
  | Le (suc n) (suc m) => le_ss (Le n m)

\function \infix 4
Lt (n m : Nat) => suc n `Le` m

\function \infix 4
Gt (n m : Nat) => m `Lt` n
