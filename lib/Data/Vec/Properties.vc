\open ::Data::Vector

\open ::Data::List::Properties
\open ::Data::Nat::Properties
\open ::Paths
\open ::Logic
\open ::Data::Empty

\function
vappend-vnil-right {n : Nat} {A : \Type0} (xs : Vector n A) 
                  : Path (\lam i => Vector (plus-comm0 n @ i) A) xs (xs +^ vnil) <= \elim n, xs
    | zero, vnil => idp
    | suc n', (:^) x xs' => path (\lam i => x :^ ((vappend-vnil-right xs') @ i))

\function
vappend-assoc {n m k : Nat} {A : \Type0} (xs : Vector n A) (ys : Vector m A) (zs : Vector k A)
              : Path (\lam i => Vector (plus-assoc n m k @ i) A) ((xs +^ ys) +^ zs) (xs +^ (ys +^ zs)) <= \elim n, xs
    | zero, vnil => idp
    | suc n', (:^) x xs' => path (\lam i => x :^ (vappend-assoc xs' ys zs @ i))

\function
vcons-injective {n : Nat} {A : \Type0} {x y : A} {xs ys : Vector n A} (p : (x :^ xs) = (y :^ ys)) : \Sigma (x = y) (xs = ys)
    => (pmap head p, pmap tail p)

\open ::Data::Fin

\function
vappend-lookup-left {n m : Nat} {A : \Type0} (xs : Vector n A) (ys : Vector m A) (i : Fin n)
                    : lookup xs i = lookup (xs +^ ys) (flift m i) <= \elim n, xs, i
    | suc n', (:^) x xs', fzero => idp
    | suc n', (:^) x xs', fsuc i' => vappend-lookup-left xs' ys i'

\function
vappend-lookup-right {n m : Nat} {A : \Type0} (xs : Vector n A) (ys : Vector m A) (i : Fin m)
                     : lookup ys i = lookup (xs +^ ys) (fadd n i) <= \elim n, xs
    | zero, vnil => idp
    | suc n', (:^) x xs' => vappend-lookup-right xs' ys i

\function
lookup-update-eq {n : Nat} {A : \Type0} (xs : Vector n A) (i : Fin n) (x : A)
                 : lookup (update xs i x) i = x <= \elim n, xs, i
    | suc n', (:^) x' xs', fzero => idp
    | suc n', (:^) x' xs', fsuc i' => lookup-update-eq xs' i' x

\function
lookup-update-neq {n : Nat} {A : \Type0} (xs : Vector n A) (i i2 : Fin n) (neq : i != i2) (x : A)
                  : lookup (update xs i x) i2 = lookup xs i2 <= \elim n, xs, i, i2
    | suc n', (:^) x' xs', fzero, fzero => absurd (neq idp)
    | suc n', (:^) x' xs', fzero, fsuc i2' => idp
    | suc n', (:^) x' xs', fsuc i', fzero => idp
    | suc n', (:^) x' xs', fsuc i', fsuc i2' => lookup-update-neq xs' i' i2' (\lam eq => neq (pmap fsuc eq)) x

\function
update-rewrite {n : Nat} {A : \Type0} (xs : Vector n A) (i : Fin n) (x1 x2 : A)
               : update (update xs i x1) i x2 = update xs i x2
               <= \elim n, xs, i
    | suc n', (:^) x' xs', fzero => idp
    | suc n', (:^) x' xs', fsuc i' => pmap ((:^) x') (update-rewrite xs' i' x1 x2)

\function
update-idempotent {n : Nat} {A : \Type0} (xs : Vector n A) (i : Fin n) (x : A)
                  : update (update xs i x) i x = update xs i x
                  => update-rewrite xs i x x

\function
update-commutes {n : Nat} {A : \Type0} (xs : Vector n A) (i1 i2 : Fin n) (neq : i1 != i2) (x1 x2 : A)
                : update (update xs i1 x1) i2 x2 = update (update xs i2 x2) i1 x1 <= \elim n, xs, i1, i2
    | suc n', (:^) x' xs', fzero, fzero => absurd (neq idp)
    | suc n', (:^) x' xs', fzero, fsuc i2' => idp
    | suc n', (:^) x' xs', fsuc i1', fzero => idp
    | suc n', (:^) x' xs', fsuc i1', fsuc i2' => pmap ((:^) x') (update-commutes xs' i1' i2' (\lam eq => neq (pmap fsuc eq)) x1 x2)

\open ::Relation
\open ::Data::Either

\function
vec-dec-eq {n : Nat} {A : \Type0} (eq : \Pi (x y : A) -> Dec (x = y)) (xs ys : Vector n A) : Dec (xs = ys) <= \elim n, xs, ys
    | zero, vnil, vnil => inr idp
    | suc n', (:^) x xs', (:^) y ys' => \case (eq x y)
      | inl x-neq-y => inl (\lam xs-eq-ys => x-neq-y (vcons-injective xs-eq-ys).1)
      | inr x-eq-y => \case (vec-dec-eq eq xs' ys')
        | inl xs'-neq-ys' => inl (\lam xs-eq-ys => xs'-neq-ys' (vcons-injective xs-eq-ys).2)
        | inr xs'-eq-ys' => inr (pmap2 (:^) x-eq-y xs'-eq-ys')
