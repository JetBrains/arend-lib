\open ::Logic
\open ::PropLogic

\function
Reflexive {X : \Type} (R : X -> X -> \Type) <=
  \Pi (x : X) -> R x x

\function
Symmetric {X : \Type} (R : X -> X -> \Type) <=
  \Pi (x y : X) -> R x y -> R y x

\function
Transitive {X : \Type} (R : X -> X -> \Type) <=
  \Pi (x y z : X) -> R x y -> R y z -> R x z

\open ::Data::Empty

\data
Di (A B : \Type0)
  | Di A B => diyes (a : A) (nb : Not B)
  | Di A B => dino (na : Not A) (b : B)

\data
Tri (A B C : \Type)
  | Tri A B C => tri_lt (a : A) (nb : Not B) (nc : Not C)
  | Tri A B C => tri_eq (na : Not A) (b : B) (nc : Not C)
  | Tri A B C => tri_gt (na : Not A) (nb : Not B) (c : C)

\class
DecPred {
  \field P   : \Pi {X : \Type0} -> X -> \Type0
  \field dec : \Pi {X : \Type0} (x : X) -> Dec (P x)
}

\class
DecRel {
  \field R   : \Pi {X Y : \Type0} -> X -> Y -> \Type0
  \field dec : \Pi {X Y : \Type0} (x : X) (y : Y) -> Dec (R x y)
}

\function 
ReflexiveP {X : \Type0} (R : X -> X -> \Prop) <=
   \Pi (x : X) -> R x x

\function
SymmetricP {X : \Type0} (R : X -> X -> \Prop) <=
  \Pi (x y : X) -> R x y -> R y x

\function
TransitiveP {X : \Type0} (R : X -> X -> \Prop) <=
  \Pi (x y z : X) -> R x y -> R y z -> R x z

\function
EquivalenceP {X : \Type0} (R : X -> X -> \Prop) <=
  \Sigma (ReflexiveP R) (SymmetricP R) (TransitiveP R)

\function
EquivRelP (X : \Set0) => 
  \Sigma (R : X -> X -> \Prop) (EquivalenceP R)
