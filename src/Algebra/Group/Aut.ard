\import Algebra.Group
\import Algebra.Group.AutInCat
\import Algebra.Group.Category
\import Algebra.Meta
\import Category
\import Meta
\import Paths.Meta
\open Group

\func Aut_gr(G : Group) : Group => Aut-cat {GroupCat} G

\func conjugate-is-iso {G : Group} (g : G) : Iso (conjugate g) \cowith
  | hinv => conjugate (inverse g)
  | hinv_f => exts (\lam _ => unfold (unfold (rewrite (G.inverse-isInv, aux, G.inverse-left, G.ide-left, G.ide-right) idp)))
  | f_hinv => exts (\lam _ => unfold (unfold (rewrite (G.inverse-isInv, aux, G.inverse-right, G.ide-left, G.ide-right) idp)))
  \where \func aux {x y z w t : G} : x G.* (y G.* z G.* w) G.* t = (x G.* y) G.* z G.* (w G.* t) => equation
