\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Monoid.Category
\import Algebra.Pointed
\import Category (Cat)
\import Category.Sub
\import Equiv
\import Paths
\import Set.Category

\instance GroupCategory : Cat Group
  => subCat (\new Embedding {
    | f G => G
    | isEmb G H => \new Retraction {
      | sec => Group.equals G H
      | f_sec => idpe
    }
  })

\record AbGroupHom \extends SetHom {
  \override Dom : AddGroup
  \override Cod : AddGroup
  | func-+ (x y : Dom) : func (x + y) = func x + func y
} \where {
    \func toMonoidHom (f : AbGroupHom) : MonoidHom \cowith
      | Dom => \new Monoid f.Dom.E (zro {f.Dom}) (+ {f.Dom}) (zro-left {f.Dom}) (zro-right {f.Dom}) (+-assoc {f.Dom})
      | Cod => \new Monoid f.Cod.E (zro {f.Cod}) (+ {f.Cod}) (zro-left {f.Cod}) (zro-right {f.Cod}) (+-assoc {f.Cod})
      | func => f.func
      | func-* => f.func-+
      | func-ide => AddGroup.cancel-left (f.func (zro {f.Dom}))
                      (inv (f.func-+ (zro {f.Dom}) (zro {f.Dom})) *> pmap f.func (zro-right {f.Dom}) *> inv (zro-right {f.Cod}))

    \func equals {A B : AddGroup} {f g : AbGroupHom A B} (p : \Pi (x : A) -> f.func x = g.func x) : f = g
      => path (\lam i => \new AbGroupHom A B (p __ @ i) (pathInProp (\lam j => \Pi (x y : A) -> p (x + y) @ j = (p x @ j) + (p y @ j)) f.func-+ g.func-+ @ i))
  }

\instance AddGroupCategory : Cat AddGroup
  | Hom G H => AbGroupHom G H
  | id => id
  | o {x y z : AddGroup} (g : AbGroupHom y z) (f : AbGroupHom x y) => \new AbGroupHom {
    | func x => g.func (f.func x)
    | func-+ x y => pmap g.func (f.func-+ x y) *> g.func-+ (f.func x) (f.func y)
  }
  | id-left _ => idp
  | id-right _ => idp
  | o-assoc _ _ _ => idp
  | univalence {A B : AddGroup} (f : AbGroupHom A B) (g : AbGroupHom B A) p q =>
    \let A=B => AddGroup.equals A B (path (iso f.func g.func (\lam x => path (\lam i => func {p @ i} x)) (\lam y => path (\lam i => func {q @ i} y)))) f.func-+
    \in (A=B, AbGroupHom.equals (\lam x => Jl {AddGroup} (\lam C A=C => func {transport (AbGroupHom A __) A=C (id A)} x = coe (A=C @ __) x right) idp A=B))
  \where
    \func id (G : AddGroup) : AbGroupHom G G \cowith
      | func x => x
      | func-+ _ _ => idp

\instance AbGroupCategory : Cat AbGroup
  => subCat (\new Embedding {AbGroup} {AddGroup} {
    | f A => A
    | isEmb A B => \new Retraction {
      | sec => AbGroup.equals A B
      | f_sec => idpe
    }
  })
