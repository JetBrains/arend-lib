\import Algebra.Group
\import Algebra.Group.Category
\import Algebra.Monoid.Product
\import Category
\import Function.Meta
\import Paths
\import Paths.Meta

\instance ProductGroup (G H : Group) : Group
  | Monoid => ProductMonoid G H
  | inverse p => (inverse p.1, inverse p.2)
  | inverse-left => pmap2 (__,__) inverse-left inverse-left
  | inverse-right => pmap2 (__,__) inverse-right inverse-right
    \where {
      \func in_1(G H : Group) : GroupHom G (ProductGroup G H) \cowith
        | func g => (g, 1)
        | func-ide => idp
        | func-* {x} {y} => rewrite (inv $ pmap (\lam z => (x G.* y, z)) H.ide-right) idp

      \func in_2(G H : Group) : GroupHom H (ProductGroup G H) \cowith
        | func h => (1, h)
        | func-ide => idp
        | func-* {x} {y} => rewrite (inv $ pmap (\lam z => (z, x H.* y)) G.ide-right) idp

      \func proj_1 (G H : Group) : GroupHom (ProductGroup G H) G \cowith
        | func g => g.1
        | func-ide => idp
        | func-* => idp

      \func proj_2 (G H : Group) : GroupHom (ProductGroup G H) H \cowith
        | func g => g.2
        | func-ide => idp
        | func-* => idp

      \func arrow_to {K G H : Group}(i : GroupHom K G)(j : GroupHom K H) : GroupHom K (ProductGroup G H) \cowith
        | func k => (i k, j k)
        | func-ide => rewrite (i.func-ide, j.func-ide) idp
        | func-* => rewrite (i.func-*, j.func-*) idp


      -- also requires short exact sequences
      \func Characterization {G H_1 H_2 : Group} {i_1 : GroupHom H_1 G} {j_1 : GroupHom G H_1} {i_2 : GroupHom H_2 G} {j_2 : GroupHom G H_2}
                                  (sec_1 : j_1 GroupCat.∘ i_1 = GroupCat.id H_1)(sec_2 : j_2 GroupCat.∘ i_2 = GroupCat.id H_2)
                                 : Iso {GroupCat} {G} {ProductGroup H_1 H_2} (ProductGroup.arrow_to j_1 j_2)
        => {?}
    }

\instance ProductAddGroup (A B : AddGroup) : AddGroup
  | AddMonoid => ProductAddMonoid A B
  | negative p => (negative p.1, negative p.2)
  | negative-left => pmap2 (__,__) negative-left negative-left
  | negative-right => pmap2 (__,__) negative-right negative-right

\instance ProductCGroup (G H : CGroup) : CGroup
  | Group => ProductGroup G H
  | CMonoid => ProductCMonoid G H

\instance ProductAbGroup (A B : AbGroup) : AbGroup
  | AddGroup => ProductAddGroup A B
  | AbMonoid => ProductAbMonoid A B