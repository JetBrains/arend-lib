\import Algebra.Group
\import Algebra.Group.Category
\import Algebra.Group.Representation.Category
\import Algebra.Group.Representation.LinAlgLemmas
\import Algebra.Group.Representation.Representation
\import Algebra.Module.Category
\import Algebra.Ring
\import Function
\import Logic
\import Paths
\import Paths.Meta

\class SubLRepres {R : Ring} {G : Group} (E : LRepres R G) (\classifying S : LRepres R G ){
  | in : InterwiningMap S E
  | in-mono : isInj in

  \func isTrivial => ZeroMod S || isSurj in
}


\func KerSubRepr{R : Ring}{G : Group}{A B : LRepres R G}(f : InterwiningMap A B) : SubLRepres A \cowith
  | S => KerRepr f
  | in => inc-KerRepr f
  | in-mono {a a' : KerRepr f} => \lam (p : inc-KerRepr f a = inc-KerRepr f a') => exts p
  \where{
    \func KerRepr {R : Ring}{G : Group}{A B : LRepres R G}(f : InterwiningMap A B) : LRepres R G \cowith
      | LModule => KerLModule f
      | ** (g : G) (e : KerLModule f) => (g A.** e.1, rewrite (f.func-**, e.2, B.g**-zro) idp)
      | **-assoc {m n : G} {e : KerLModule f} => exts A.**-assoc
      | id-action => exts A.id-action
      | lin => exts A.lin
      | lin-*c => exts A.lin-*c

    \func inc-KerRepr {R : Ring}{G : Group}{A B : LRepres R G}(f : InterwiningMap A B) : InterwiningMap (KerRepr f) A \cowith
      | func => KerLModuleHom f
      | func-** => idp
  }

-- | *c r a => (r *c a.1, TruncP.map a.2 \lam s => (r *c s.1, func-*c *> pmap (r *c) s.2))
\func ImSubRepr {R : Ring}{G : Group}{A B : LRepres R G}(f : InterwiningMap A B) : SubLRepres B \cowith
  | S => ImSubRepr.ImRepr {R} {G} {A} {B} f
  | in => inc-ImRepr f
  | in-mono {a a' : ImRepr f} => \lam (p : inc-ImRepr f a = inc-ImRepr f a') => ext p
  \where {
    \func ImRepr {R : Ring}{G : Group}{A B : LRepres R G}(f : InterwiningMap A B) : LRepres R G \cowith
      | LModule => ImageLModule f
      | ** (g : G) (e : ImageLModule f) => (g B.** e.1, TruncP.map e.2 \lam s => (g A.** s.1, func-** *> pmap (g B.**) s.2))
      | **-assoc => ext B.**-assoc
      | id-action => ext B.id-action
      | lin => ext B.lin
      | lin-*c => ext B.lin-*c

    \func inc-ImRepr{R : Ring}{G : Group}{A B : LRepres R G}(f : InterwiningMap A B) : InterwiningMap (ImRepr f) B \cowith
      | func => ImageLModuleRightHom f
      | func-** => idp
  }
