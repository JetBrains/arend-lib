\import Algebra.Group
\import Algebra.Group.Category
\import Algebra.Monoid
\import Algebra.Monoid.Category
\import Algebra.Pointed
\import Algebra.Ring
\import Algebra.Semiring
\import Arith.Int
\import Arith.Nat
\import Category
\import Category.Adjoint
\import Category.Functor
\import Category.Limit
\import Category.Meta
\import Category.Subcat
\import Equiv \hiding (Map)
\import Function.Meta
\import HLevel
\import Logic
\import Logic.FirstOrder.Algebraic
\import Logic.FirstOrder.Algebraic.Category
\import Logic.FirstOrder.Term
\import Paths
\import Paths.Meta
\import Set.Category
\import Set.Fin

\record SemiringHom \extends AddMonoidHom, MonoidHom {
  \override Dom : Semiring
  \override Cod : Semiring

  \lemma func-natCoef {n : Nat} : func (natCoef n) = natCoef n \elim n
    | 0 => rewrite (natCoefZero,natCoefZero) func-zro
    | suc n => rewrite (natCoefSuc,natCoefSuc) $ func-+ *> pmap2 (+) func-natCoef func-ide
}

\record RingHom \extends SemiringHom, AddGroupHom {
  \override Dom : Ring
  \override Cod : Ring
} \where {
    \func equals {R S : Ring} {f g : RingHom R S} (p : \Pi (x : R) -> f x = g x) : f = g
      => exts p

    \lemma contr-isTerm {R S : Ring} (c : Contr S) : Contr (RingHom R S) \cowith
      | center => \new RingHom {
        | func _ => c.center
        | func-+ => c.contraction _
        | func-ide => c.contraction _
        | func-* => c.contraction _
      }
      | contraction f => exts $ \lam e => c.contraction _
}

\instance RingCat : Cat Ring
  | Hom M N => RingHom M N
  | id => id
  | o {x y z : Ring} (g : RingHom y z) (f : RingHom x y) => \new RingHom {
    | func x => g (f x)
    | func-ide => pmap g f.func-ide *> g.func-ide
    | func-+ => pmap g f.func-+ *> g.func-+
    | func-* => pmap g f.func-* *> g.func-*
  }
  | id-left => idp
  | id-right => idp
  | o-assoc => idp
  | univalence => sip (\lam {X} {R} {S} (p1 : RingHom) _ => exts (p1.func-zro, \lam _ _ => p1.func-+, p1.func-ide, \lam _ _ => p1.func-*, natCoefUnique R S p1, AddGroup.negative-equality R S p1.func-zro p1.func-+))
  \where {
    \func id (M : Ring) : RingHom M M \cowith
      | func x => x
      | func-ide => idp
      | func-+ => idp
      | func-* => idp

    \lemma natCoefUnique {X : \Set} (R S : Ring X) (h : RingHom R S (\lam x => x)) (n : Nat) : R.natCoef n = S.natCoef n \elim n
      | 0 => R.natCoefZero *> h.func-zro *> inv S.natCoefZero
      | suc n => R.natCoefSuc n *> h.func-+ *> pmap2 (S.+) (natCoefUnique R S h n) h.func-ide *> inv (S.natCoefSuc n)
  }

\instance CRingCat : Cat CRing
  => subCat (\new Embedding {CRing} {Ring} {
    | f R => R
    | isEmb (R S : CRing) => \new Retraction {
      | sec p => path (\lam i => \new CRing {
        | Ring => p @ i
        | *-comm => pathInProp (\Pi {x y : p @ __} -> x * y = y * x) R.*-comm S.*-comm @ i
      })
      | f_sec => idpe
    }
  })
  \where {
    \func forgetful : Functor CRingCat SetCat \cowith
      | F R => R
      | Func f => func {f}
      | Func-id => idp
      | Func-o => idp
      \where {
        \func reflectsLimit {J : SmallPrecat} (H : Functor J CRingCat) : ReflectsLimit forgetful H
          => (CRingBicat.createsLimits H (SetBicat.limit (Comp CRingCat.forgetful H))).3

        \func preservesLimit {J : SmallPrecat} (H : Functor J CRingCat) : PreservesLimit forgetful H
          => (CRingBicat.createsLimits H (SetBicat.limit (Comp CRingCat.forgetful H))).2
      }
  }

{-
\class FinSignature {
  | symb-count : Nat
  | domain : Array Nat symb-count
}

\data Term {S : FinSignature} (V : \Set)
  | var V
  | apply (f : Fin symb-count) (Array (Term V) (domain f))

\class FinTheory \extends FinSignature
  | axioms : Array (\Sigma (n : Nat) (t s : Term (Fin n)))

\func foo (n : Nat) => typecheck (number n)

\func theory (T : FinTheory) (name : Ref) => func name `(Theory) $
  coclause (``Sort, `(\Sigma)) ::
  -- coclause (``Symb, app `(Fin) (number T.symb-count)) ::
  -- coclause (``Symb, app `(Fin) (fieldCall ``symb-count `(T))) ::
  coclause (``Symb, `(Fin T.symb-count)) ::
  coclause (``domain, case (appHole :: nil) (map (\lam k => interr (app `(() ::)) k `(nil)) T.domain)) ::
  coclause (``PredSymb, `(Empty)) ::
  coclause (``predDomain, `(absurd)) ::
  coclause (``axioms, app `(arraySubset {Sequent {\this}}) (map (\lam t => tuple (lambda ignored (app `(Fin) t.1), hole, `(nil), app (app `(equality) t.2) t.3)) T.axioms)) ::
  nil

-- refExpr QName

\func theory (T : FinTheory) (name : Ref) =>
  `(\instance $(name) : Theory
      | Sort => \Sigma
      --  | Symb _ => Fin $(reflect T.symb-count)
      | Symb _ => Fin T.symb-count
      | domain => $(case (appHole :: nil) (mkArray (\lam j => clause (patternNum j) (interr (app `(() ::)) (T.domain j) `(nil)))))
      | PredSymb => Empty
      | predDomain => absurd
      | axioms => arraySubset {Sequent {\this}} $(map (\lam t => `(\lam _ => Fin $(t.1), _, nil, equality $(t.2) $(t.3))) T.axioms)
  )`

\meta theory (T : FinTheory) =>
  \new Theory {
    | Sort => \Sigma
    | Symb _ => Fin T.symb-count
    | domain => typecheck $ case (appHole :: nil) $ mkArray $ \lam j => clause (patternNum j) $ interr (app $ reflect $ () ::) (T.domain j) (reflect nil)
    | PredSymb => Empty
    | predDomain => absurd
    | axioms => arraySubset {Sequent {\this}} $ typecheck $ map (\lam t => reflect (\lam _ => Fin (quote t.1), _, nil, equality (quote t.2) (quote t.3))) T.axioms
  }

map (\lam t => tupleExpr (lamExpr (true, false, nothing) (appExpr (defRef ``Fin) (numberExpr t.1) true) :: holeExpr :: defRef ``nil :: appExpr (appExpr (defRef ``equality) (wrapExpr t.2) true) (wrapExpr t.3) true :: nil)) T.axioms

\meta test => getExpectedType $ \lam et => {?}
 -}

\instance CRingBicat : BicompleteCat
  | Cat => CRingCat
  | limit => CompletePrecat.applyEquiv catEquiv
  | colimit => CocompletePrecat.applyEquiv catEquiv
  \where {
    \instance theory : Theory
      | Sort => \Sigma
      | Symb _ => Fin 5
      | domain => \case __ \with {
        | 0 => nil
        | 1 => nil
        | 2 => () :: () :: nil
        | 3 => () :: () :: nil
        | 4 => () :: nil
      }
      | PredSymb => Empty
      | predDomain => absurd
      | axioms => arraySubset {Sequent {\this}} (
          (\lam _ => \Sigma, _, nil, equality (apply 2 (apply 0 nil :: var () :: nil)) (var ())) ::
          (\lam _ => Fin 3,  _, nil, equality (apply 2 (apply 2 (var 0 :: var 1 :: nil) :: var 2 :: nil)) (apply 2 (var 0 :: apply 2 (var 1 :: var 2 :: nil) :: nil))) ::
          (\lam _ => \Sigma, _, nil, equality (apply 3 (apply 1 nil :: var () :: nil)) (var ())) ::
          (\lam _ => Fin 3,  _, nil, equality (apply 3 (apply 3 (var 0 :: var 1 :: nil) :: var 2 :: nil)) (apply 3 (var 0 :: apply 3 (var 1 :: var 2 :: nil) :: nil))) ::
          (\lam _ => Fin 2,  _, nil, equality (apply 2 (var 0 :: var 1 :: nil)) (apply 2 (var 1 :: var 0 :: nil))) ::
          (\lam _ => Fin 2,  _, nil, equality (apply 3 (var 0 :: var 1 :: nil)) (apply 3 (var 1 :: var 0 :: nil))) ::
          (\lam _ => \Sigma,  _, nil, equality (apply 2 (apply 4 (var () :: nil) :: var () :: nil)) (apply 0 nil)) ::
          (\lam _ => Fin 3,  _, nil, equality (apply 3 (var 0 :: apply 2 (var 1 :: var 2 :: nil) :: nil)) (apply 2 (apply 3 (var 0 :: var 1 :: nil) :: apply 3 (var 0 :: var 2 :: nil) :: nil))) ::
          nil)

    \func catEquiv : CatEquiv (ModelCat theory) CRingCat modToRing \cowith
      | Func (f : ModelHom) => \new RingHom {
        | func => f.funcs
        | func-zro => f.func-op 0 nil
        | func-ide => f.func-op 1 nil
        | func-+ {x} {y} => f.func-op 2 (x :: y :: nil)
        | func-* {x} {y} => f.func-op 3 (x :: y :: nil)
      }
      | Func-id => idp
      | Func-o => idp
      | LAdj => ringtoMod.functor
      | eta {
        | trans M => id M
        | natural f => idp
      }
      | isAdjoint => \new QEquiv {
        | ret (h : RingHom) => \new ModelHom {
          | funcs => h
          | func-op => \case \elim __ \with {
            | 0 => \lam _ => h.func-zro
            | 1 => \lam _ => h.func-ide
            | 2 => \lam d => h.func-+
            | 3 => \lam d => h.func-*
            | 4 => \lam d => h.func-negative
          }
          | func-rel => \case __
        }
        | ret_f X => path (\lam _ => X)
        | f_sec X => path (\lam _ => X)
      }
      | eta-iso {X} => \new Iso {
        | inv => id X
        | inv_f => idp
        | f_inv => idp
      }
      | epsilon-iso {Y} => \new Iso {
        | inv => \new ModelHom {
          | funcs y => y
          | func-op => \case \elim __ \with {
            | 0 => \lam d => idp
            | 1 => \lam d => idp
            | 2 => \lam d => idp
            | 3 => \lam d => idp
            | 4 => \lam d => idp
          }
          | func-rel => \case \elim __
        }
        | inv_f => idp
        | f_inv => idp
      }

    \func modToRing (M : Model theory) : CRing (M ()) \cowith
      | zro => operation 0 nil
      | ide => operation 1 nil
      | + x y => operation 2 (x :: y :: nil)
      | * x y => operation 3 (x :: y :: nil)
      | negative x => operation 4 (x :: nil)
      | zro-left {x} => M.isModel _ (inP (0,idp)) (\lam _ => x) (\case __)
      | +-assoc {x} {y} {z} => M.isModel _ (inP (1,idp)) (\lam {_} => x :: y :: z :: nil) (\case __)
      | ide-left {x} => M.isModel _ (inP (2,idp)) (\lam _ => x) (\case __)
      | *-assoc {x} {y} {z} => M.isModel _ (inP (3,idp)) (\lam {_} => x :: y :: z :: nil) (\case __)
      | +-comm {x} {y} => M.isModel _ (inP (4,idp)) (\lam {_} => x :: y :: nil) (\case __)
      | *-comm {x} {y} => M.isModel _ (inP (5,idp)) (\lam {_} => x :: y :: nil) (\case __)
      | negative-left {x} => M.isModel _ (inP (6,idp)) (\lam {_} _ => x) (\case __)
      | ldistr {x} {y} {z} => M.isModel _ (inP (7,idp)) (\lam {_} => x :: y :: z :: nil) (\case __)

    \func ringtoMod (R : CRing) : Model theory (\lam _ => R) \cowith
      | operation => \case \elim __ \with {
        | 0 => \lam _ => 0
        | 1 => \lam _ => 1
        | 2 => \lam l => l 0 + l 1
        | 3 => \lam l => l 0 * l 1
        | 4 => \lam l => negative (l 0)
      }
      | relation => \case __
      | isModel => \case \elim __, \elim __ \with {
        | _, inP (0,idp) => \lam rho _ => zro-left
        | _, inP (1,idp) => \lam rho _ => +-assoc
        | _, inP (2,idp) => \lam rho _ => ide-left
        | _, inP (3,idp) => \lam rho _ => *-assoc
        | _, inP (4,idp) => \lam rho _ => +-comm
        | _, inP (5,idp) => \lam rho _ => *-comm
        | _, inP (6,idp) => \lam rho _ => negative-left
        | _, inP (7,idp) => \lam rho _ => ldistr
      }
      \where {
        \func functor : Functor CRingCat (ModelCat theory) ringtoMod \cowith
          | Func (f : RingHom) => \new ModelHom {
            | funcs => f
            | func-op => \case \elim __ \with {
              | 0 => \lam _ => f.func-zro
              | 1 => \lam _ => f.func-ide
              | 2 => \lam _ => f.func-+
              | 3 => \lam _ => f.func-*
              | 4 => \lam _ => f.func-negative
            }
            | func-rel => \case __
          }
          | Func-id => idp
          | Func-o => idp
      }

    \sfunc createsLimits {J : SmallPrecat} (F : Functor J CRingCat) : CreatesLimit CRingCat.forgetful F
      => {?}
  }

\func natMap {R : Semiring} : SemiringHom NatSemiring R \cowith
  | func => natCoef
  | func-+ {n m : Nat} : R.natCoef (n + m) = natCoef n + natCoef m \elim m {
    | 0 => inv (pmap (natCoef n +) natCoefZero *> zro-right)
    | suc m => natCoefSuc (n + m) *> pmap (`+ ide) func-+ *> +-assoc *> pmap (natCoef n +) (inv (natCoefSuc m))
  }
  | func-zro => natCoefZero
  | func-ide => natCoefSuc 0 *> pmap (`+ ide) natCoefZero *> zro-left
  | func-* {n m : Nat} : R.natCoef (n * m) = natCoef n * natCoef m \elim m {
    | 0 => natCoefZero *> inv (pmap (natCoef n *) natCoefZero *> zro_*-right)
    | suc m => func-+ *> pmap (`+ natCoef n) func-* *> inv (pmap (natCoef n *) (natCoefSuc m) *> ldistr *> pmap (natCoef n * natCoef m +) ide-right)
  }

\lemma natComm {R : Semiring} (n : Nat) (x : R) : natMap n * x = x * natMap n \elim n
  | 0 => pmap (`* x) natCoefZero *> zro_*-left *> inv (pmap (x *) natCoefZero *> zro_*-right)
  | suc n => pmap (`* x) (natCoefSuc n) *> rdistr *> pmap (natCoef n * x +) ide-left *> pmap (`+ x) (natComm n x) *> inv (pmap (x *) (natCoefSuc n) *> ldistr *> pmap (x * natCoef n +) ide-right)

\func intMap {R : Ring} : RingHom IntRing R \cowith
  | func => intCoef
  | func-+ {x y : Int} : R.intCoef (x + y) = intCoef x + intCoef y \elim x, y {
    | pos n, pos m => natMap.func-+
    | pos n, neg (suc _ \as m) => intCoef_diff n m
    | neg (suc _ \as n), pos m => intCoef_diff m n *> +-comm
    | neg (suc _ \as n), neg (suc _ \as m) => pmap negative natMap.func-+ *> negative_+ *> +-comm
  }
  | func-ide => natMap.func-ide
  | func-* {x y : Int} : R.intCoef (x * y) = intCoef x * intCoef y \elim x, y {
    | pos n, pos m => natMap.func-*
    | pos n, neg (suc _ \as m) => intCoef_neg _ *> pmap negative natMap.func-* *> inv negative_*-right
    | neg (suc _ \as n), pos m => intCoef_neg _ *> pmap negative natMap.func-* *> inv negative_*-left
    | neg (suc _ \as n), neg m => natMap.func-* *> inv (pmap (negative (natCoef n) *) (intCoef_neg m) *> negative_*)
  }
  \where {
    \open AddGroup(negative_zro,negative_+)
    \open Ring

    \lemma intCoef_diff {R : Ring} (n m : Nat) : R.intCoef (n Nat.- m) = intCoef n - intCoef m \elim n, m
      | 0, 0 => inv (pmap (natCoef 0 + negative __) natCoefZero *> pmap (natCoef 0 +) negative_zro *> zro-right)
      | 0, suc _ \as m => inv (pmap (__ - natCoef m) natCoefZero *> zro-left)
      | suc _ \as n, 0 => inv (pmap (natCoef n + negative __) natCoefZero *> pmap (natCoef n +) negative_zro *> zro-right)
      | suc n, suc m => intCoef_diff n m *>
      pmap (natCoef n +) (inv (pmap (ide +) negative_+ *> inv +-assoc *> pmap (`- natCoef m) negative-right *> zro-left)) *>
      inv (pmap2 (__ + negative __) (natCoefSuc n) (natCoefSuc m) *> +-assoc)
  }

\lemma intComm {R : Ring} (n : Int) (x : R) : intMap n * x = x * intMap n \elim n
  | pos n => natComm n x
  | neg n => rewrite Ring.intCoef_neg (Ring.negative_*-left *> pmap negative (natComm n x) *> inv Ring.negative_*-right)
