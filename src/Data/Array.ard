\import Data.Bool
\import Data.Maybe
\import Data.Or
\import Function.Meta
\import Meta
\import Paths
\import Paths.Meta

\func mkArray {A : \Type} {n : Nat} (f : Fin n -> A) => \new Array A n f

\func tail {n : Nat} {A : Fin (suc n) -> \Type} (a : DArray A) : DArray (\lam j => A (suc j)) \elim a
  | _ :: a => a

\func map {A B : \Type} (f : A -> B) (as : Array A) : Array B \cowith
  | len => as.len
  | at i => f (as i)

\func \infixr 5 ++ {A : \Type} (xs ys : Array A) : Array A \elim xs
  | nil => ys
  | :: a xs => a :: xs ++ ys
  \where {
    \func index-left {A : \Type} {l m : Array A} (i : Fin l.len) : Fin (DArray.len {l ++ m}) \elim l, i
      | a :: l, 0 => 0
      | a :: l, suc i => suc (index-left i)

    \func ++_index-left {A : \Type} {l m : Array A} (i : Fin l.len) : (l ++ m) (index-left i) = l i \elim l, i
      | a :: l, 0 => idp
      | a :: l, suc i => ++_index-left i

    \lemma index-left-nat {A : \Type} {l m : Array A} {i : Fin l.len} : index-left {A} {l} {m} i = {Nat} i \elim l, i
      | a :: l, 0 => idp
      | a :: l, suc i => pmap suc index-left-nat

    \func index-right {A : \Type} {l m : Array A} (i : Fin m.len) : Fin (DArray.len {l ++ m}) \elim l
      | nil => i
      | a :: l => suc (index-right i)

    \func ++_index-right {A : \Type} {l m : Array A} {i : Fin m.len} : (l ++ m) (index-right i) = m i \elim l
      | nil => idp
      | a :: l => ++_index-right

    \lemma index-right-nat {A : \Type} {l m : Array A} {i : Fin m.len} : index-right {A} {l} i = {Nat} l.len Nat.+ i \elim l
      | nil => idp
      | a :: l => pmap suc index-right-nat

    \func split-index {A : \Type} {l m : Array A} (i : Fin (DArray.len {l ++ m}))
      : Or (\Sigma (j : Fin l.len) (i = index-left j)) (\Sigma (j : Fin m.len) (i = index-right j)) \elim l, i
      | nil, i => inr (i,idp)
      | a :: l, 0 => inl (0,idp)
      | a :: l, suc i => \case split-index i \with {
        | inl r => inl (suc r.1, \lam i => suc (r.2 i))
        | inr r => inr (r.1, \lam i => suc (r.2 i))
      }
  }

\func map_++ {A B : \Type} (f : A -> B) {l l' : Array A} : map f (l ++ l') = map f l ++ map f l' \elim l
  | nil => idp
  | :: a l => pmap (f a ::) (map_++ f)

\func ++_nil {A : \Type} {l : Array A} : l ++ nil = l \elim l
  | nil => idp
  | :: a l => pmap (a ::) ++_nil

\func Index {A : \Type} (x : A) (l : Array A) => \Sigma (i : Fin l.len) (l i = x)

\func index-left {A : \Type} {x : A} {l l' : Array A} (i : Index x l) : Index x (l ++ l') \elim l, i
  | nil, ((), _)
  | :: y l, (0, e) => (0, e)
  | :: y l, (suc i, e) => \have (j,p) => index-left (i, e) \in (suc j, p)

\func index-right {A : \Type} {x : A} {l l' : Array A} (i : Index x l') : Index x (l ++ l') \elim l
  | nil => i
  | :: y l => \have (j,p) => index-right i \in (suc j, p)

\func filter {A : \Type} (p : A -> Bool) (l : Array A) : Array A \elim l
  | nil => nil
  | :: a l => if (p a) (a :: filter p l) (filter p l)

\lemma filter-sat {A : \Type} (p : A -> Bool) (l : Array A) (i : Fin (DArray.len {filter p l})) : p (filter p l i) = true \elim l
  | :: a l => cases (p a arg addPath, i) \with {
    | false, _, i => filter-sat p l i
    | true, q, 0 => q
    | true, q, suc i => filter-sat p l i
  }

\func filter-index {A : \Type} (p : A -> Bool) (l : Array A) (i : Fin l.len) (px : p (l i) = true) : Index (l i) (filter p l) \elim l, i
  | nil, ()
  | :: a l, 0 => rewrite px (0, idp)
  | :: a l, suc i => mcases {if} \with {
    | true => \have (j,q) => filter-index p l i px \in (suc j, q)
    | false => filter-index p l i px
  }

\func Big {A B : \Type} (op : A -> B -> B) (b : B) (l : Array A) : B \elim l
  | nil => b
  | :: a l => op a (Big op b l)

\func filterMap {A B : \Type} (f : A -> Maybe B) (l : Array A) : Array B \elim l
  | nil => nil
  | :: a l => \case f a \with {
    | nothing => filterMap f l
    | just b => b :: filterMap f l
  }

\func filterMap-index {A B : \Type} (f : A -> Maybe B) (l : Array A) {b : B} {j : Fin l.len} (p : f (l j) = just b) : Index b (filterMap f l) \elim l, j
  | :: a l, 0 => rewrite p (0,idp)
  | :: a l, suc j => mcases \with {
    | nothing => filterMap-index f l p
    | just _ => \have (i,q) => filterMap-index f l p \in (suc i, q)
  }

\func indexed (l : DArray) : DArray (\lam j => \Sigma (Fin l.len) (l.A j)) \cowith
  | at j => (j, l j)

\func indexed' (l : DArray) : Array (\Sigma (j : Fin l.len) (l.A j)) \cowith
  | len => l.len
  | at j => (j, l j)

\func replicate {A : \Type} (n : Nat) (a : A)
  => \new Array A n (\lam _ => a)

\func reverse {A : \Type} (l : Array A) : Array A
  => aux nil l
  \where {
    \func aux {A : \Type} (acc l : Array A) : Array A \elim l
      | nil => acc
      | a :: l => aux (a :: acc) l
  }

\func reverse-cons {A : \Type} {a : A} {l : Array A} : reverse (a :: l) = reverse l ++ a :: nil
  => aux nil
  \where {
    \func aux {A : \Type} (acc : Array A) {a : A} {l : Array A} : reverse.aux (acc ++ a :: nil) l = reverse.aux acc l ++ a :: nil \elim l
      | nil => idp
      | a' :: l => aux (a' :: acc)
  }

\data All {A : \Type} (P : A -> \Type) (l : Array A) \elim l
  | nil => all-nil
  | a :: l => all-cons (P a) (All P l)

\func all_++ {A : \Type} {P : A -> \Type} {l l' : Array A} (all1 : All P l) (all2 : All P l') : All P (l ++ l') \elim l, all1
  | nil, _ => all2
  | a :: l, all-cons c all1 => all-cons c (all_++ all1 all2)

\func all-reverse {A : \Type} {P : A -> \Type} {l : Array A} (all : All P l) : All P (reverse l)
  => aux all all-nil
  \where {
    \func aux {l : Array A} (all : All P l) {acc : Array A} (all-acc : All P acc) : All P (reverse.aux acc l) \elim l, all
      | nil, _ => all-acc
      | a :: l, all-cons c all => aux all (all-cons c all-acc)
  }

\func all-left {A : \Type} {P : A -> \Type} {l l' : Array A} (all : All P (l ++ l')) : All P l \elim l, all
  | nil, _ => all-nil
  | a :: l, all-cons c d => all-cons c (all-left d)

\func all-right {A : \Type} {P : A -> \Type} {l l' : Array A} (all : All P (l ++ l')) : All P l' \elim l, all
  | nil, all => all
  | a :: l, all-cons _ all => all-right all

\data All2 {A : \Type} (P : A -> A -> \Type) (l : Array A) \elim l
  | nil => all2-nil
  | a :: l => all2-cons (All (P a) l) (All2 P l)

\func all2_++ {A : \Type} {P : A -> A -> \Type} (sym : \Pi {a a' : A} -> P a a' -> P a' a) {l : Array A} {a : A} (all : All2 P (a :: l)) : All2 P (l ++ a :: nil) \elim l, all
  | nil, all => all
  | a' :: l, all2-cons c all => \case \elim c, \elim all \with {
    | all-cons p c, all2-cons d all => all2-cons (all_++ d $ all-cons {A} {P a'} {_} {a} {nil} (sym p) all-nil) $ all2_++ sym (all2-cons c all)
  }

\func all2-reverse {A : \Type} {P : A -> A -> \Type} (sym : \Pi {a a' : A} -> P a a' -> P a' a) {l : Array A} (all : All2 P l) : All2 P (reverse l) \elim l, all
  | nil, _ => all2-nil
  | a :: l, all2-cons c all => rewrite reverse-cons $ all2_++ sym $ all2-cons (all-reverse c) (all2-reverse sym all)