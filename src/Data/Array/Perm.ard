\import Equiv
\import Logic.Meta

{-
\truncated \data Perm {A : \Type} (xs ys : Array A) : \Prop \elim xs, ys
  | nil, nil => perm-nil
  | :: x xs, :: y ys => perm-:: (x = y) (Perm xs ys)
  | :: x (:: x' xs), :: y (:: y' ys) => perm-swap (x = y') (x' = y) (xs = ys)
  | xs, ys => perm-trans {zs : Array A} (Perm xs zs) (Perm zs ys)

\lemma perm-equiv {A : \Type} {xs ys : Array A} (p : Perm xs ys) : âˆƒ (e : Equiv {Fin xs.len} {Fin ys.len}) (\Pi (j : Fin xs.len) -> xs j = ys (e j)) \elim xs, ys, p
  | nil, nil, perm-nil => {?}
  | x :: xs, y :: ys, perm-:: p p1 => {?}
  | x :: (x' :: xs), y :: (y' :: ys), perm-swap p p1 p2 => {?}
  | xs, ys, perm-trans p1 p2 => {?}
-}

\data D {A : \Type} (l : Array A) \elim l
  | :: x xs => con (D xs)
  | :: x (:: x' l) => con2 (x = x')

\func test {A : \Type} {l : Array A} (d : D l) : Nat \elim l, d
  | x :: xs, con d => {?}
  | x :: (x' :: xs), con2 p => 0

\data List (A : \Type)
  | lnil
  | \infixr 5 ::: A (List A)

\truncated \data LPerm {A : \Type} (xs : List A) : \Prop \elim xs
  --  | ::: x xs => lperm-:: (x = x) (LPerm xs)
  | ::: x (::: x' xs) => lperm-swap (x = x') (LPerm xs)

\lemma lperm-equiv {A : \Type} {xs : List A} (p : LPerm xs) : \Sigma \elim xs, p
  --  | x ::: xs, lperm-:: p p1 => {?}
  | x ::: (x' ::: xs), lperm-swap p p1 => {?}
