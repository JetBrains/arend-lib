\import Equiv.Fiber
\import Equiv.Path
\import Function
\import HLevel
\import Logic
\import Paths
\import Paths.Meta

-- # Definition of equivalences

\record Map {A B : \Type} (f : A -> B)

\record Section (ret : B -> A) (ret_f : \Pi (x : A) -> ret (f x) = x) \extends Map
  \where {
    \func =Fiber {A B : \Type} (f : A -> B) : Section f = Fib (-o f) id
      => path (iso (\lam (s : Section f) => Fib.make (-o f) s.ret (path (\lam i => s.ret_f __ @ i)))
                   (\lam z => \new Section f z.1 (\lam x => path ((z.2 @ __) x)))
                   idpe
                   idpe)

    \lemma isContr (e : Equiv) : Contr (Section e.f)
      => rewrite (=Fiber e.f) (Equiv=>contrFibers (-o_Equiv e) id)

    \lemma levelProp (r : Retraction) : isProp (Section r.f)
      => \lam s => isContr=>isProp (isContr (\new Equiv { | Section => s | Retraction => r })) s
  }

\record Retraction (sec : B -> A) (f_sec : \Pi (y : B) -> f (sec y) = y) \extends Map
  \where {
    \func =Fiber {A B : \Type} (f : A -> B) : Retraction f = Fib (f `o-) id
      => path (iso (\lam (s : Retraction f) => Fib.make (f `o-) s.sec (path (\lam i => s.f_sec __ @ i)))
                   (\lam z => \new Retraction f z.1 (\lam x => path ((z.2 @ __) x)))
                   idpe
                   idpe)

    \lemma isContr (e : Equiv) : Contr (Retraction e.f)
      => rewrite (=Fiber e.f) (Equiv=>contrFibers (o-_Equiv e) id)

    \lemma levelProp (s : Section) : isProp (Retraction s.f)
      => \lam r => isContr=>isProp (isContr (\new Equiv { | Section => s | Retraction => r })) r
  }

\record Equiv \extends Section, Retraction
  \where {
    \use \level levelProp {A B : \Type} {f : A -> B} (e e' : Equiv f) : e = e' =>
      path (\lam i => \new Equiv {
        | Section => isContr=>isProp {Section f} (Section.isContr e) e e' @ i
        | Retraction => isContr=>isProp {Retraction f} (Retraction.isContr e) e e' @ i
      })

    \func equals {A B : \Type} {e e' : Equiv {A} {B}} (p : e.f = e'.f) : e = e' =>
      path (\lam i => \new Equiv {
        | Section => pathOver (isContr=>isProp (Section.isContr e')
                                               (rewriteI p (\new Section e.f e.ret e.ret_f))
                                               (\new Section e'.f e'.ret e'.ret_f)) @ i
        | Retraction => pathOver (isContr=>isProp (Retraction.isContr e')
                                                  (rewriteI p (\new Retraction e.f e.sec e.f_sec))
                                                  (\new Retraction e'.f e'.sec e'.f_sec)) @ i
      })
  }

\record QEquiv \extends Equiv { | sec => ret }
  \where {
    \use \coerce fromEquiv (e : Equiv) : QEquiv \cowith
      | Section => e
      | f_sec y => pmap (\lam y => e.f (e.ret y)) (inv (e.f_sec y)) *> pmap e.f (e.ret_f (e.sec y)) *> e.f_sec y

    \func fromEquiv' (e : Equiv) : QEquiv \cowith
      | Map => e
      | ret => e.sec
      | ret_f a => inv (e.ret_f (e.sec (e.f a))) *> pmap e.ret (e.f_sec (e.f a)) *> e.ret_f a
      | f_sec => e.f_sec
  }

-- # Examples of equialences

\func idEquiv {A : \Type} : QEquiv \cowith
  | A => A
  | B => A
  | f x => x
  | ret x => x
  | ret_f _ => idp
  | f_sec _ => idp

\func symQEquiv {A B : \Type} (e : QEquiv {A} {B}) : QEquiv {B} {A} \cowith
  | f => e.ret
  | ret => e.f
  | ret_f => e.f_sec
  | f_sec => e.ret_f

\func \fixr 3 transQEquiv {A B C : \Type} (e1 : QEquiv {A} {B}) (e2 : QEquiv {B} {C}) : QEquiv {A} {C} \cowith
  | f x => e2.f (e1.f x)
  | ret y => e1.ret (e2.ret y)
  | ret_f x => pmap e1.ret (e2.ret_f (e1.f x)) *> e1.ret_f x
  | f_sec y => pmap e2.f (e1.f_sec (e2.sec y)) *> e2.f_sec y

\module TwoOutOfThree \where {
  \func leftFactor {A B C : \Type} (e1 : Retraction {A} {B}) (g : B -> C) (e3 : QEquiv (g `o` e1.f)) : QEquiv g \cowith
    | ret c => e1.f (e3.ret c)
    | ret_f b =>
        e1.f (e3.ret (g b))                 ==< pmap (e1.f `o` e3.ret `o` g) (inv (e1.f_sec b)) >==
        e1.f (e3.ret (g (e1.f (e1.sec b)))) ==< pmap e1.f (e3.ret_f (e1.sec b)) >==
        e1.f (e1.sec b)                     ==< e1.f_sec b >==
        b                                   `qed
    | f_sec => e3.f_sec

  \func rightFactor {A B C : \Type} (f : A -> B) (e2 : Section {B} {C}) (e3 : QEquiv (e2.f `o` f)) : QEquiv f \cowith
    | ret b => e3.ret (e2.f b)
    | ret_f => e3.ret_f
    | f_sec b =>
        f (e3.ret (e2.f b))                 ==< inv (e2.ret_f (f (e3.ret (e2.f b)))) >==
        e2.ret (e2.f (f (e3.ret (e2.f b)))) ==< pmap e2.ret (e3.f_sec (e2.f b)) >==
        e2.ret (e2.f b)                     ==< e2.ret_f b >==
        b                                   `qed

  \lemma rightEmbedding {A B C : \Type} (f : A -> B) (e2 : B >-> C) (e3 : QEquiv (e2.f `o` f)) : Equiv f
    => rightFactor f (ESEquiv.toEquiv (\new ESEquiv e2.f {
      | isEmb => e2.isEmb
      | isSurj c => inP (f (e3.ret c), e3.f_sec c)
    })) e3

  \lemma parallelEquiv {A B C D : \Type} (ab : A -> B) (cd : C -> D) (ac : Equiv {A} {C}) (bd : Equiv {B} {D}) (h : \Pi (a : A) -> bd.f (ab a) = cd (ac.f a)) : Equiv ab = Equiv cd
    => propExt (\lam (e : Equiv ab) => leftFactor ac cd (coe (\lam i => QEquiv (h __ @ i)) (transQEquiv e bd) right))
               (\lam (e : Equiv cd) => rightFactor ab bd (coe (\lam i => QEquiv (\lam a => inv (h a) @ i)) (transQEquiv ac e) right))

  \lemma leftEquiv {A B C : \Type} (e : Equiv {A} {B}) (g : B -> C) : Equiv g = Equiv (g `o` e.f)
    => propExt (\lam (e2 : Equiv g) => transEquiv e e2)
               (\lam (e3 : Equiv (g `o` e.f)) => leftFactor e g e3)

  \lemma rightEquiv {A B C : \Type} (f : A -> B) (e : Equiv {B} {C}) : Equiv f = Equiv (e.f `o` f)
    => propExt (\lam (e1 : Equiv f) => transEquiv e1 e)
               (\lam (e3 : Equiv (e.f `o` f)) => rightFactor f e e3)

  \lemma compositeEquiv {A B C : \Type} (f : A -> B) (g : B -> C) (e : Equiv (g `o` f)) : Equiv f = Equiv g
    => propExt (\lam (e1 : Equiv f) => leftFactor e1 g e)
               (\lam (e2 : Equiv g) => rightFactor f e2 e)
}

\func \fixr 3 transEquiv {A B C : \Type} (e1 : Equiv {A} {B}) (e2 : Equiv {B} {C}) : Equiv {A} {C} \cowith
  | f x => e2.f (e1.f x)
  | ret y => e1.ret (e2.ret y)
  | ret_f x => pmap e1.ret (e2.ret_f (e1.f x)) *> e1.ret_f x
  | sec y => e1.sec (e2.sec y)
  | f_sec y => pmap e2.f (e1.f_sec (e2.sec y)) *> e2.f_sec y

\func -o_Equiv {C : \Type} (e : Equiv) : Equiv {e.B -> C} {e.A -> C} (-o e.f) \cowith
  | ret => -o e.sec
  | ret_f g => path (\lam i x => g (e.f_sec x @ i))
  | sec => -o e.ret
  | f_sec g => path (\lam i x => g (e.ret_f x @ i))

\func o-_Equiv {C : \Type} (e : Equiv) : Equiv {C -> e.A} (e.f `o-) \cowith
  | ret => e.ret `o-
  | ret_f g => path (\lam i x => e.ret_f (g x) @ i)
  | sec => e.sec `o-
  | f_sec g => path (\lam i x => e.f_sec (g x) @ i)

\func piEquiv {A : \Type} (B : A -> \Type) (f f' : \Pi (a : A) -> B a) : QEquiv \cowith
  | A => f = f'
  | B => \Pi (a : A) -> f a = f' a
  | f p a => path ((p @ __) a)
  | ret g => path (\lam i => g __ @ i)
  | ret_f _ => idp
  | f_sec _ => idp

\func sigmaEquiv {A : \Type} (B : A -> \Type) (p p' : \Sigma (a : A) (B a)) : QEquiv \cowith
  | A => p = p'
  | B => \Sigma (s : p.1 = p'.1) (transport B s p.2 = p'.2)
  | f q => (pmap __.1 q, pmapd (\lam p => B p.1) __.2 q)
  | ret q => SigmaExt B p p' q.1 q.2
  | ret_f q => Jl (\lam p'' q' => SigmaExt B p p'' (pmap __.1 q') (pmapd (\lam p => B p.1) __.2 q') = q') idp q
  | f_sec q =>
    \let t => \case p'.1 \as p'1        , q.1 \as q1 : p.1 = p'1,
                    p'.2 \as p'2 : B p'1, q.2 \as q2 : transport B q1 p.2 = p'2
              \return pmapd (\lam p => B p.1) __.2 (SigmaExt {A} B p (p'1,p'2) q1 q2) = q2 \with {
                | p'1, idp, p'2, idp => idp
              }
    \in path (\lam i => (q.1, t @ i))

\func piSigmaEquiv {A A' : \Type} (h : A -> A') (B : A' -> \Type)
  : QEquiv {\Pi (a : A) -> B (h a)}
           {\Sigma (g : A -> \Sigma (a' : A') (B a')) ((\lam a => (g a).1) = h)}
  \cowith
  | f g => (\lam a => (h a, g a), idp)
  | ret p => \lam a => transport B (path ((p.2 @ __) a)) (p.1 a).2
  | ret_f g => idp
  | f_sec p => Jl (\lam (h' : A -> A') q => (\lam a => (h' a, transport B (path ((q @ __) a)) (p.1 a).2), idp)
                                            = {\Sigma (g : A -> \Sigma (a' : A') (B a')) ((\lam a => (g a).1) = h')}
                                            (p.1, q))
                  idp
                  p.2

\func piSigmaIdEquiv {A : \Type} (B : A -> \Type)
  : QEquiv {\Pi (a : A) -> B a}
           {\Sigma (g : A -> \Sigma (a : A) (B a)) ((\lam a => (g a).1) = id)}
  => piSigmaEquiv id B

-- # Embeddings and surjections

\record Embedding (isEmb : \Pi (a a' : A) -> Retraction (pmap f {a} {a'})) \extends Map {
  \func pmap-isEquiv {a a' : A} : QEquiv (pmap f {a} {a'}) => pathEquiv (f __ = f __) (\lam {a} {a'} => isEmb a a')
} \where {
  \use \level levelProp {A B : \Type} {f : A -> B} (e e' : Embedding f) : e = e' =>
    path (\lam i => \new Embedding f (\lam a a' => Retraction.levelProp (pmap-isEquiv {e} {a} {a'}) (e.isEmb a a') (e'.isEmb a a') @ i))

  -- | The diagonal of an embedding is an equivalence
  \lemma diag-equiv (e : Embedding) : Equiv {e.A} {\Sigma (a1 a2 : e.A) (e.f a1 = e.f a2)} (\lam a => (a, a, idp)) =>
    \let | S => \Sigma (x : e.A) (\Sigma (y : e.A) (x = y))
         | T => \Sigma (x y : e.A) (e.f x = e.f y)
         | q => \new QEquiv {e.A} {S} (\lam x => (x,(x,idp))) {
                  | ret t => t.1
                  | ret_f x => idp
                  | f_sec t => pmap (\lam r => ((t.1,r) : S)) (Jl (\lam x p => (t.1,idp) = {\Sigma (x : e.A) (t.1 = x)} (x,p)) idp t.2.2)
                }
         | pe {a} {a'} : QEquiv (pmap e.f {a} {a'}) => pmap-isEquiv {e} {a} {a'}
         | s => \new QEquiv {S} {T} (\lam t => (t.1, t.2.1, pmap e.f t.2.2)) {
                  | ret t => (t.1, (t.2, pe.ret t.3))
                  | ret_f t => pmap (\lam r => ((t.1, (t.2.1, r)) : S)) (pe.ret_f t.2.2)
                  | f_sec t => pmap (\lam r => ((t.1, t.2, r) : T)) (pe.f_sec t.3)
                }
    \in transQEquiv q s

  \lemma projection {A : \Type} (B : A -> \Prop) : Embedding {\Sigma (a : A) (B a)} __.1 \cowith
    | isEmb p p' => \new Retraction {
      | sec q => SigmaExt B p p' q (Path.inProp _ _)
      | f_sec => idpe
    }

  -- | If the fibers of a map are propositions, then the map is an embedding
  \lemma fibers {A B : \Type} (f : A -> B) (p : \Pi (b : B) -> isProp (Fib f b)) : Embedding f \cowith
    | isEmb a a' =>
      \let e (q : f a = f a') => Equiv.f {Fib.equiv f (f a') (a,q) (a',idp)} (p (f a') (a,q) (a',idp))
      \in \new Retraction {
        | sec q => (e q).1
        | f_sec q => (e q).2
      }

  -- | The fibers of an embedding are propositions.
  \lemma embeddingFiber-isProp (e : Embedding) (b : e.B) : isProp (Fib e.f b) => \lam x x' =>
    \let | eq : Retraction (pmap e.f {x.1} {x'.1}) => e.isEmb x.1 x'.1
         | fx=fx' => x.2 *> inv x'.2
    \in Fib.ext e.f b x x' (eq.sec fx=fx') (
      pmap e.f (eq.sec fx=fx') *> x'.2 ==< pmap (`*> x'.2) (eq.f_sec fx=fx') >==
      fx=fx' *> x'.2                   ==< *>-assoc _ _ _ >==
      x.2 *> inv x'.2 *> x'.2          ==< pmap (x.2 *>) (inv_*> _) >==
      x.2                              `qed
    )
}

\func transEmbedding {A B C : \Type} (e1 : Embedding {A} {B}) (e2 : Embedding {B} {C}) : Embedding {A} {C} \cowith
  | f a => e2.f (e1.f a)
  | isEmb a a' => \new Retraction {
    | sec p => Retraction.sec {e1.isEmb a a'} (Retraction.sec {e2.isEmb (e1.f a) (e1.f a')} p)
    | f_sec p => pmap (pmap e2.f) (Retraction.f_sec {e1.isEmb a a'} (Retraction.sec {e2.isEmb (e1.f a) (e1.f a')} p)) *> Retraction.f_sec {e2.isEmb (e1.f a) (e1.f a')} p
  }

\func \infixr 1 >-> => Embedding {__} {__}

\record Surjection (isSurj : \Pi (y : B) -> TruncP (Fib f y)) \extends Map

\func \infixr 1 ->> => Surjection {__} {__}

\record ESEquiv \extends Embedding, Surjection
  \where {
    \use \level levelProp {A B : \Type} {f : A -> B} (e e' : ESEquiv f) : e = e' =>
      path (\lam i => \new ESEquiv { | Embedding  => Embedding.levelProp  e e' @ i
                                     | Surjection => Path.inProp {Surjection f} e e' @ i })

    \use \coerce toEquiv (e : ESEquiv) : QEquiv e.f =>
      \let sec (y : e.B) => TruncP.remove (Embedding.embeddingFiber-isProp e y) (e.isSurj y)
      \in \new QEquiv {
        | ret y => (sec y).1
        | ret_f x => Retraction.sec {e.isEmb _ _} (sec (e.f x)).2
        | f_sec y => (sec y).2
      }

    \use \coerce fromEquiv (e : Equiv) : ESEquiv e.f \cowith
      | isEmb a a' => pmapEquiv e {a} {a'}
      | isSurj y => inP (e.sec y, e.f_sec y)
  }
