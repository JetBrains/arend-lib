\import Data.Array
\import Data.Bool
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Reflect.ConcreteExpr
\import Reflect.Meta

\func id {A : \Type} => \lam (x : A) => x

\func -o {A B C : \Type} (f : A -> B) => \lam (g : B -> C) x => g (f x)

\func o- {A B C : \Type} (g : B -> C) => \lam (f : A -> B) x => g (f x)

\func \infixr 8 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam x => g (f x)

\func iterl {A : \Type} (f : A -> A) (n : Nat) (a : A) : A \elim n
  | 0 => a
  | suc n => iterl f n (f a)

\func iterr {A : \Type} (f : A -> A) (n : Nat) (a : A) : A \elim n
  | 0 => a
  | suc n => f (iterr f n a)

\func isSurj {A B : \Type} (f : A -> B) => \Pi (y : B) -> âˆƒ (x : A) (f x = y)
  \where {
    \lemma comp {A B C : \Type} {f : A -> B} (fs : isSurj f) {g : B -> C} (gs : isSurj g) : isSurj (g o f)
      => \lam z => \have | (inP (y,gy=z)) => gs z
                         | (inP (x,fx=y)) => fs y
                   \in inP (x, pmap g fx=y *> gy=z)
  }

\func assuming {A B : \Type} (f : (A -> B) -> B) (g : A -> B) => f g

-- | `f $ a` returns `f a`
\meta \infixr 0 $ => run {
  args <- getArgs,
  typecheck (\case span (\lam p => not p.2) args \with {
    | (implicit, nil) => reflect (error "Required at least one explicit argument")
    | (implicit, a :: rest) => appsExpr a.1 (implicit ++ rest)
  })
}

-- | `f $' a` returns `f a`
\meta \infixl 0 $' => $