\import Algebra.Pointed.Category
\import Arith.Nat
\import Category
\import Function (iterr)
\import HLevel
\import Homotopy.Fibration
\import Homotopy.Loop
\import Homotopy.Suspension
\import Homotopy.Truncation
\import Homotopy.Pointed \using (Pointed \as HPointed)

\func connected-func (n : Nat) {X Y :\hType} (f : X -> Y) => \Pi (y : Y) -> Contr (Trunc_-1+ (suc n) (Fib f y))
\func connected-func* (n : Nat) {X Y : HPointed} (f : X ->* Y) => \Pi (y : Y) -> Contr (Trunc_-1+ (suc n) (Fib f.1 y))

\func connected-type (n : Nat)(X : \hType) => Contr(Trunc_-1+ (suc n) X)

--\func FreudenthalSuspensionTheorem{n : Nat} {X : HPointed}(p : connected-type n X) : connected-func (2 Nat.* n) (pi-susp.merloop {X}).1 => {?}
--
--\func Connected_pi {X Y : HPointed}(f : X ->* Y) {n k : Nat}(k-small : k NatSemiring.<= n)(f-connected : connected-func* n f) : Iso {PointedCat} (pi-func k f) => {?}

\func Connected_susp {n : Nat}{X : HPointed}(p : connected-type n X) : connected-type (suc n) (Susp X) => {?}

