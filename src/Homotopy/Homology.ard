\import Algebra.Group
\import Algebra.Group.Category
\import Algebra.Monoid.Category
\import Algebra.Pointed.Category
\import Category
\import Equiv (QEquiv)
\import Homotopy.Space
\import Homotopy.Suspension
\import Homotopy.Pointed \using (Pointed \as HPointed)
\import Paths


-- TODO : change 1) definition of Homotopy.Pointed so that it lives on \hType
-- TODO : change 2) definition of ->* so that it includes coercion with ->


--\class Homology{
--  | \coerce  H_ (n : Nat) (X : HPointed \lp \oo) : AbGroup
--  | H_-func (n : Nat) {X Y :  HPointed \lp \oo} (f : X ->* Y) : AbGroupCat.Hom (H_ n X) (H_ n Y)
--  | H_-id {n : Nat} {X :  HPointed \lp \oo} : H_-func n (Id* X) = AddMonoidCat.id (H_ n X)
--  | H_-comp {n : Nat} {X Y Z :  HPointed \lp \oo} (f : X ->* Y) (g : Y ->* Z):  (H_-func n g) AddMonoidCat.∘ (H_-func n f) = H_-func n (g o' f)
--  | susp {n : Nat} {X :  HPointed \lp \oo} : AbGroupCat.Hom (H_ n X) (H_ (suc n) (PSusp X))
--  | susp-iso {n : Nat} {X : HPointed \lp \oo} : Iso (susp {_}{n} {X})
--  | susp-nat {n : Nat} {X Y : HPointed \lp \oo} (f : X ->* Y) : (susp AbGroupCat.∘ (H_-func n f)) = ((H_-func (suc n) (PSusp-func f)) AbGroupCat.∘ susp)
--  | cofiber (n : Nat){X Y : HPointed \lp \oo}(f : X ->* Y) :
--  AddSExactSequence {| A => H_ n X | B => H_ n Y | C => H_ n (Cofiber.pointed f)
--                     | f => H_-func n f | g => H_-func n (Cofiber.pointed-cfcod f)}
--}

--\func PtdConstructor {A : \hType}(a : A) : HPointed \lp \oo => \new HPointed \lp \oo {
--  | E => A
--  | base => a
--}
--
--\func BasePointIndependence {H_ : Homology}{n : Nat}{A : \hType }{a a' : A} :
--  H_ n (PtdConstructor a) = H_ n (PtdConstructor a') => AbGroupCat.isotoid {?}
--  \where {
--    \func twoSuspensions : PSusp (PtdConstructor a) = PSusp (PtdConstructor a') => idp
--
--    \func Homologies_Suspensions : Iso {_} {H_ n (PSusp (PtdConstructor a))} {H_ n (PSusp (PtdConstructor a'))} => AbGroupCat.idtoiso (pmap (H_ n) twoSuspensions)
--    --      \func e : Iso {AbGroupCat} {H_ n (PtdConstructor a)} {H_ n (PtdConstructor a')}
--    --        => Iso.composite (susp-iso {H_} {n} {PtdConstructor a}) (Iso.composite (Homologies_Suspensions) (Iso.hinv{susp-iso {_} {n} {PtdConstructor a'}}))
--
--    --      \func e' : Iso {AbGroupCat} {H_ n (PtdConstructor a)} {H_ n (PSusp (PtdConstructor a'))}
--    --        => Iso.composite (susp-iso {_} {n} {PtdConstructor a}) (Homologies_Suspensions {H_} {n} {A}{a}{a'})
--    --              Iso.composite (Iso.hinv{susp-iso {_} {n} {PtdConstructor a'}})
--    --          (Iso.composite Homologies_Suspensions (susp-iso {_} {n} {PtdConstructor a}))
--  }
