\import Data.Bool
\import Data.Maybe
\import Data.Or

\data CoreExpr
  | infVarExpr (Or String CoreExpr)
  | boxExpr CoreExpr
  | piExpr (isExplicit : Bool) (dom cod : CoreExpr)
  | typeConstructorExpr QName (clauseIndex : Nat) (clauseArgs : Array CoreExpr) (arg : CoreExpr)
  | typeDestructorExpr QName (arg : CoreExpr)
  | sigmaExpr (Array CoreExpr)
  | appExpr CoreExpr CoreExpr (isExplicit : Bool)
  | caseExpr (isSCase : Bool) (params : Array CoreExpr) (resultType : CoreExpr) (resultTypeLevel : Maybe CoreExpr) (clauses : Array (\Sigma (Array CorePattern) (Maybe CoreExpr))) (args : Array CoreExpr)
  | projExpr CoreExpr Nat
  | lamExpr (isExplicit : Bool) (type body : CoreExpr)
  | dataExpr CoreExpr
  | stringExpr String
  | universeExpr
  | pathExpr (argType arg : CoreExpr)
  | localVarExpr Nat
  | newExpr QName (Array (\Sigma QName CoreExpr))
  | pEvalExpr CoreExpr
  | atExpr CoreExpr CoreExpr
  | tupleExpr (fields sigmaType : Array CoreExpr)
  | qNameExpr QName
  | errorExpr (isGoal : Bool)
  | classCallExpr QName (Array (\Sigma QName CoreExpr))
  | conCallExpr QName (dataArgs conArgs : Array CoreExpr)
  | fieldCallExpr QName CoreExpr
  | defCallExpr QName (Array CoreExpr) -- either function or data
  | arrayExpr (elems : Array CoreExpr) (elemsType : CoreExpr) (tail : Maybe CoreExpr)
  | letExpr (clauses : Array (\Sigma (type : CoreExpr) (body : Maybe CoreExpr))) CoreExpr
  | natExpr Nat

\data CorePattern
  | absurdPattern
  | varPattern
  | conPattern (Maybe QName) (Array CorePattern)