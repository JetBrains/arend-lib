\import Data.Bool
\import Function
\import Logic
\import Meta
\import Paths

\data Dec (E : \Prop)
  | yes E
  | no (Not E)
  \where
    \use \level levelProp : \Prop

\func decToBool {E : \Prop} (d : Dec E) : Bool
  | yes _ => true
  | no _ => false

\class Decide (E : \Prop)
  | decide : Dec E

\class BaseSet (E : \Set)

\class SubSet (S : BaseSet) (\classifying contains : S -> \Prop) {
  \func struct : BaseSet \cowith
    | E => \Sigma (x : S) (contains x)
}

\class SeparatedSet \extends BaseSet
  | separatedEq {x y : E} : Not (Not (x = y)) -> x = y

-- | A set with a tight apartness relation.
\class Set# \extends SeparatedSet {
  | \infix 4 # : E -> E -> \Prop
  | #-irreflexive {x : E} : Not (x # x)
  | #-symmetric {x y : E} : x # y -> y # x
  | #-comparison (x y z : E) : x # z -> x # y || y # z
  | tightness {x y : E} : Not (x # y) -> x = y
  | separatedEq {x} ~~x=y => tightness (\lam x#y => ~~x=y (\lam x=y => #-irreflexive (transport (x #) (inv x=y) x#y)))

  \lemma apartNotEqual (x y : E) (x#y : x # y) : x /= y =>
    \lam x=y => #-irreflexive (transport (x #) (inv x=y) x#y)
}

\class DecSet \extends BaseSet, Set# {
  \field decideEq (x y : E) : Dec (x = y)
  | nonEqualApart {x y : E} : x /= y -> x # y
  | \infix 4 == : E -> E -> Bool
  | == x y => decToBool (decideEq x y)

  \default # x y : \Prop => x /= y
  \default nonEqualApart \as nonEqualApartImpl {x} {y} (p : x /= y) : x # y => p
  \default #-irreflexive {x} (x/=x : x # x) : Empty => x/=x idp
  \default #-symmetric {x} {y} (x/=y : x # y) : y # x => \lam y=x => x/=y (inv y=x)
  \default #-comparison x y z (x/=z : x # z) : x # y || y # z => \case decideEq x y \with {
    | yes x=y => byRight (\lam y=z => x/=z (x=y *> y=z))
    | no x/=y => byLeft x/=y
  }
  \default tightness {x} {y} (x//=y : Not (x # y)) : x = y => \case decideEq x y \with {
    | yes x=y => x=y
    | no x/=y => absurd (x//=y x/=y)
  }
}

\lemma decideEq=_reduce {A : DecSet} {x y : A} (p : x = y) : decideEq x y = yes p
  => propPath

\lemma decideEq/=_reduce {A : DecSet} {x y : A} (p : x /= y) : decideEq x y = no p
  => propPath

\lemma ==_= {A : DecSet} {a a' : A} (so : So (a == a')) : a = a'
  => unfold (==) at so $ mcases {decToBool} so _ \with {
    | yes p, _ => p
    | no n, ()
  }

\truncated \data Trunc0 (A : \Type) : \Set
  | in0 A
