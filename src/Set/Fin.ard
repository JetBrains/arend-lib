\import Algebra.Ordered
\import Arith.Fin
\import Arith.Nat
\import Data.Array
\import Data.Or
\import Equiv
\import Equiv.Univalence
\import Function ($)
\import Logic
\import Logic.Classical
\import Logic.Meta
\import Meta
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Set
\open Nat(+)
\open LinearlyOrderedSemiring(<=_+)

\class FinSet \extends BaseSet, Choice
  | finCard : Nat
  | finEq : TruncP (E = {\Set} Fin finCard)

  | choice {B} => \case finEq \with {
    | inP p => rewriteF (inv p) (finiteAC {finCard}) {B}
  }
  \where {
    \use \level levelProp (A : \Set) (X Y : FinSet A) : X = Y
      => ext (\case X.finEq, Y.finEq \with {
        | inP A=Xcard, inP A=Ycard => FinCardBij (inv A=Xcard *> A=Ycard)
      })

    \lemma finiteAC {n : Nat} {A : Fin n -> \Type} (f : \Pi (i : Fin n) -> TruncP (A i)) : TruncP (\Pi (i : Fin n) -> A i) \elim n
      | 0 => inP (\case __)
      | suc n => \case f 0, finiteAC (\lam i => f (suc i)) \with {
        | inP a0, inP aS => inP (\case \elim __ \with {
          | 0 => a0
          | suc i => aS i
        })
      }

    \func search {n : Nat} (A : Fin n -> \Prop) (d : \Pi (j : Fin n) -> Dec (A j))
      : Or (\Sigma (j0 : Fin n) (A j0) (\Pi (j : Fin n) -> A j -> (j0 : Nat) <= j)) (\Pi (j : Fin n) -> Not (A j)) \elim n
      | 0 => inr (\case __)
      | suc n => \case d 0, search _ (\lam j => d (suc j)) \with {
        | yes e, _ => inl (0, e, \lam j _ => zero<=_)
        | no e, inl (j0,Aj0,u) => inl (suc j0, Aj0, \case \elim __ \with {
          | 0 => \lam A0 => absurd (e A0)
          | suc j => \lam Aj+1 => suc<=suc (u j Aj+1)
        })
        | no e, inr f => inr $ \case \elim __ \with {
          | 0 => e
          | suc j => f j
        }
      }

    \func pred {n : Nat} (x : Fin (suc (suc n))) : Fin (suc n) \elim x
      | 0 => 0
      | suc x => x

    \lemma suc-isInj {n : Nat} (x y : Fin n) (p : suc x = suc y) : x = y \elim n
      | suc n => pmap pred p

    \lemma FinCardBij {n m : Nat} (p : Fin n = Fin m) : n = m =>
      \have | e : ESEquiv => =-to-Equiv p
            | e' : ESEquiv => =-to-Equiv (inv p)
      \in <=-antisymmetric (FinCardInj e  (\lam x y => Retraction.sec {e.isEmb  x y}))
                           (FinCardInj e' (\lam x y => Retraction.sec {e'.isEmb x y}))

    \lemma FinCardInj {n m : Nat} (f : Fin n -> Fin m) (f-inj : \Pi (x y : Fin n) -> f x = f y -> x = y) : n <= m \elim n, m
      | 0, _ => zero<=_
      | suc n, 0 => \case f 0
      | suc n, suc m => suc<=suc (FinCardInj (\lam x => skip (f 0) (f (suc x)) (\lam f_0=f_suc => \case f-inj 0 (suc x) f_0=f_suc))
                                             (\lam x y p => suc-isInj x y (f-inj (suc x) (suc y) (skip-isInj p))))

    \func skip {n : Nat} (x0 x : Fin (suc n)) (d : x0 /= x) : Fin n \elim n, x0, x
      | _, 0, 0 => absurd (d idp)
      | _, 0, suc x => x
      | suc n, suc x0, 0 => 0
      | suc n, suc x0, suc x => suc (skip x0 x (\lam x0=x => d (pmap (suc __) x0=x)))

    \lemma skip-isInj {n : Nat} {x0 x y : Fin (suc n)} {d : x0 /= x} {d' : x0 /= y} (p : skip x0 x d = skip x0 y d') : x = y \elim n, x0, x, y
      | _, 0, 0, _ => absurd (d idp)
      | _, 0, _, 0 => absurd (d' idp)
      | _, _, 0, 0 => idp
      | suc n, 0, suc x, suc y => pmap (suc __) p
      | suc n, suc x0, 0, suc y => \case p
      | suc n, suc x0, suc x, 0 => \case p
      | suc n, suc x0, suc x, suc y => pmap (suc __) (skip-isInj (suc-isInj _ _ p))
  }

\lemma transport_zero {n m : Nat} (p : n = m) : transport Fin (pmap suc p) 0 = 0 \elim p
  | idp => idp

\lemma transport_suc {n m : Nat} (p : n = m) (x : Fin n) : transport Fin (pmap suc p) (suc x) = suc (transport Fin p x) \elim p
  | idp => idp

\func fin-inc {n m : Nat} (p : n <= m) (i : Fin n) : Fin m
  => toFin (<-transitive-left (fin_< i) p)

\func fin-inc-left {n m : Nat} (i : Fin n) : Fin (n + m)
  => fin-inc (<=_+ <=-refl zero<=_) i
  \where {
    \lemma char {n m : Nat} (i : Fin n) : fin-inc-left {n} {m} i = {Nat} i \elim n
      | 0 => \case i
      | suc n => mod_< $ <-transitive-left (fin_< i) $ suc<=suc $ <=_+ <=-refl zero<=_

    \lemma char_nat {n : Nat} (i : Nat) : fin-inc-left {suc i} {n} i = {Nat} i \elim i
      | i => char {suc i} i *> mod_< id<suc
  }

\func fin-inc-right {n m : Nat} (i : Fin m) : Fin (n + m)
  => fin-inc (<=_+ zero<=_ <=-refl) i
  \where {
    \lemma char {n m : Nat} (i : Fin m) : fin-inc-right {n} i = {Nat} i \elim m
      | 0 => \case i
      | suc m => mod_< $ <-transitive-left (fin_< i) $ suc<=suc $ <=_+ zero<=_ <=-refl

    \lemma char_nat {n : Nat} (i : Nat) : fin-inc-right {n} {suc i} i = {Nat} i \elim i
      | i => char i *> mod_< id<suc
  }

\func fin-raise {n k : Nat} (i : Fin n) : Fin (k + n) \elim k
  | 0 => i
  | suc k => suc (fin-raise i)

\func sface {n : Nat} (k : Fin (suc n)) (i : Fin n) : Fin (suc n) => \case LinearOrder.dec<_<= (i : Nat) k \with {
  | inl _ => i
  | inr _ => suc i
}

\lemma sface-skip {n : Nat} (k : Fin (suc n)) (i : Fin n) : sface k i /= k => unfold sface (mcases \with {
  | inl i<k => \lam i=k => NatSemiring.<-irreflexive (transport {Nat} (`< k) i=k i<k)
  | inr k<=i => \lam i+1=k => NatSemiring.<-irreflexive (<-transitive-left id<suc (rewriteF (inv i+1=k) k<=i))
})

\func cyclePerm {n : Nat} (k : Fin n) : QEquiv {Fin n} {Fin n} \elim n
  | suc n => \new QEquiv {
    | f => \case __ \with {
      | 0 => k
      | suc i => sface k i
    }
    | ret i => \case LinearOrder.trichotomy (i : Nat) k \with {
      | less i<k => suc (toFin (<-transitive-left i<k (<_suc_<= (fin_< k))))
      | equals _ => 0
      | greater _ => i
    }
    | ret_f => \case \elim __ \with {
      | 0 => rewrite (LinearOrder.trichotomy=_reduce idp) idp
      | suc i => mcases {2} \with {
        | inl i<k => rewrite (LinearOrder.trichotomy<_reduce i<k) (pmap (\lam j => suc j) (fin_nat-inj (toFin=id _)))
        | inr k<=i => rewrite (LinearOrder.trichotomy>_reduce (<-transitive-right k<=i id<suc)) idp
      }
    }
    | f_sec i => mcases {2} \with {
      | less i<k => mcases \with {
          | inl _ => fin_nat-inj (toFin=id _)
          | inr k<=i' => \case NatSemiring.<-irreflexive (NatSemiring.<-transitive-left i<k (rewriteF toFin=id k<=i'))
        }
      | equals i=k => inv (fin_nat-inj i=k)
      | greater k<i => \case \elim i, \elim k<i \with {
        | 0, k<0 => contradiction
        | suc i, k<i+1 => rewrite (LinearOrder.dec<=_reduce (<_suc_<= k<i+1)) idp
      }
    }
  }

\instance emptyFin : FinSet Empty
  | finCard => 0
  | finEq => inP (path (iso {Empty} {Fin 0} (\case __) (\case __) idpe (\case __)))

\instance unitFin : FinSet (\Sigma)
  | finCard => 1
  | finEq => inP (path (iso {\Sigma} {Fin 1} (\lam _ => 0) (\lam _ => ()) idpe (\lam x => cases x idp)))

\instance finFin (n : Nat) : FinSet (Fin n)
  | finCard => n
  | finEq => inP idp

\instance finOr (S T : FinSet) : FinSet (Or S T)
  | finCard => S.finCard + T.finCard
  | finEq => \case S.finEq, T.finEq \with {
    | inP Se, inP Te => inP (pmap2 Or Se Te *> QEquiv-to-= (aux {S.finCard} {T.finCard}))
  }
  \where {
    \func aux {n m : Nat} : QEquiv {Or (Fin n) (Fin m)} {Fin (n + m)} \cowith
      | f (e : Or (Fin n) (Fin m)) : Fin (n + m) \with {
        | inl s => fin-inc-left s
        | inr t => fin-raise t
      }
      | ret (i : Fin (n + m)) : Or (Fin n) (Fin m) \elim n, i {
        | 0, i => inr i
        | suc n, 0 => inl 0
        | suc n, suc i => \case ret i \with {
          | inl s => inl (suc s)
          | inr t => inr t
        }
      }
      | ret_f => \case \elim __ \with {
        | inl s => ret_inl-lem s
        | inr t => ret_inr-lem t
      }
      | f_sec (i : Fin (n + m)) : f (ret i) = i \elim n, i {
        | 0, i => idp
        | suc n, 0 => idp
        | suc n, suc i => mcases {_} {arg addPath} \with {
          | inl s, p => \have q => inv (pmap f p) *> f_sec i \in \case \elim n, \elim i, \elim s, \elim q \with {
            | suc n, i, s, q => fin_nat-inj (mod_< (<-transitive-left (fin_< (suc s)) (suc<=suc (later (suc<=suc (<=_+ <=-refl zero<=_))))) *> inv (pmap suc (mod_< (<-transitive-left (fin_< s) (suc<=suc (<=_+ <=-refl zero<=_)))))) *> pmap (\lam i => suc i) q
          }
          | inr t, p => pmap (\lam i => suc i) (inv (pmap f p) *> f_sec i)
        }
      }

    \lemma ret_inl-lem {n m : Nat} (s : Fin n) : finOr.aux.ret {n} {m} (toFin (<-transitive-left (fin_< s) (<=_+ <=-refl zero<=_))) = inl s
      => aux (later (\case \elim n, \elim s \with {
        | suc n, 0 => idp
        | suc n, suc s => mod_< (<-transitive-left (fin_< (suc s)) (suc<=suc (<=_+ <=-refl zero<=_)))
      }))
      \where
        \lemma aux {n m : Nat} {i : Fin (n + m)} {s : Fin n} (p : i = {Nat} s) : finOr.aux.ret i = inl s \elim n, i, s
          | suc n, 0, _ => pmap inl (fin_nat-inj {suc n} p)
          | suc n, suc i, 0 => \case p
          | suc n, suc i, suc s => rewrite (aux (pmap pred p)) idp

    \lemma ret_inr-lem {n m : Nat} (t : Fin m) : aux.ret (fin-raise {m} {n} t) = inr t \elim n
      | 0 => idp
      | suc n => rewrite (ret_inr-lem {n} t) idp
  }

\lemma finSum (S : FinSet) (Q : S -> FinSet) : FinSet (\Sigma (i : S) (Q i))
  => \case S.finEq \with {
    | inP e => transportInv (\lam X => \Pi (Q : X -> FinSet) -> FinSet (\Sigma (i : X) (Q i))) e (\lam Q => \new FinSet {
      | finCard => Big (+) 0 (\lam i => finCard {Q i})
      | finEq => \case FinSet.finiteAC (\lam i => finEq {Q i}) \with {
        | inP d => inP (path (\lam j => \Sigma (i : Fin S.finCard) (d i @ j)) *> Equiv-to-= (aux (\lam i => finCard {Q i})))
      }
    }) Q
  }
  \where {
    \func aux {n : Nat} (Q : Fin n -> Nat) : QEquiv {\Sigma (i : Fin n) (Fin (Q i))} {Fin (Big (+) 0 Q)} \cowith
      | f (p : \Sigma (i : Fin n) (Fin (Q i))) : Fin (Big (+) 0 Q) \elim n, p {
        | 0, ((),_)
        | suc n, (0, j) => fin-inc (<=_+ <=-refl zero<=_) j
        | suc n, (suc i, j) => fin-raise (f (i,j))
      }
      | ret (k : Fin (Big (+) 0 Q)) : \Sigma (i : Fin n) (Fin (Q i)) \elim n {
        | suc n => \case finOr.aux.ret k \with {
          | inl s => (0,s)
          | inr t => \have (i,r) => ret t \in (suc i, r)
        }
      }
      | ret_f (p : \Sigma (i : Fin n) (Fin (Q i))) : ret (f p) = p \elim n, p {
        | 0, ((),_)
        | suc n, (0, j) => rewrite finOr.ret_inl-lem idp
        | suc n, (suc i, j) => rewrite finOr.ret_inr-lem (rewrite (ret_f {n} {\lam i => Q (suc i)} (i,j)) idp)
      }
      | f_sec (k : Fin (Big (+) 0 Q)) : f (ret k) = k \elim n {
        | suc n => mcases {_} {arg addPath} \with {
          | inl s, p => inv (pmap finOr.aux.f p) *> finOr.aux.f_sec k
          | inr t, p => pmap fin-raise (f_sec t) *> inv (pmap finOr.aux.f p) *> finOr.aux.f_sec k
        }
      }
  }

\instance pairFin (A B : FinSet) => finSum A (\lam _ => B)
