\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Ordered
\import Arith.Rat
\import Arith.Real
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Operations
\import Order.Biordered
\import Order.Lattice
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Set.Filter
\import Set.Subset
\import Topology.CoverSpace
\import Topology.MetricSpace.ValuedMetricSpace
\import Topology.UniformSpace
\import Topology.UniformSpace.Complete
\import Topology.UniformSpace.Product
\import Topology.UniformSpace.StronglyComplete (StronglyCompleteUniformSpace)
\open RealAbGroup \hiding (+, join, meet, negative, zro<ide)
\open ValuedPseudoMetricSpace (metricUniform)
\open PseudoMetricSpace (halving)

\class PseudoMetricSpace \extends LinearlyValuedPseudoMetricSpace {
  | V => RealMetricValueLinearOrder

  \lemma halving {z x y : E} {eps : Real} (d1 : dist z x < half eps) (d2 : dist z y < half eps) : dist x y < eps
    => dist-triang <∘r OrderedAddMonoid.<_+ (rewrite dist-symm in d1) d2 <∘l Preorder.=_<= half+half

  \lemma dist-uniform-rat {C : Set (Set E)} : UniformSpace.isUniform C <-> ∃ (eps : Rat) (0 < eps) ∀ x ∃ (U : C) ∀ {y} (dist x y < eps -> U y)
    => (\lam Cu => \case dist-uniform.1 Cu \with {
          | inP (eps,eps>0,h) => \case real_<-rat-char.1 eps>0 \with {
            | inP (eps',eps'>0,eps'<eps) => inP (eps', eps'>0, \lam x => \case h x \with {
              | inP (U,CU,g) => inP (U, CU, \lam d => g $ d <∘ real_<_L.2 eps'<eps)
            })
          }
    }, \lam (inP (eps,eps>0,h)) => dist-uniform.2 $ inP (eps, real_<_L.2 eps>0, h))
} \where {
  \instance RealMetricValueLinearOrder : MetricValueLinearOrder Real
    | LinearlyBiorderedAbMonoid => RealAbGroup
    | hasPositive => inP (1, RealAbGroup.zro<ide)
    | +_<-dense {a} {b} a<b => \case isDense a<b \with {
      | inP (c,a<c,c<b) => inP (c - a, transport (`< _) negative-right $ <_+-left _ a<c, transportInv (`< _) (+-comm *> +-assoc *> pmap (c +) negative-left *> zro-right) c<b)
    }
}

\func OBall {X : PseudoMetricSpace} (eps : Real) (x : X) : Set X
  => \lam y => dist x y < eps

\lemma OBall_s<=* {X : PseudoMetricSpace} {x : X} {eps delta : Real} (delta<eps : delta < eps) : OBall delta x s<=* OBall eps x
  => \let | d => eps - delta
          | d>0 : 0 < d => transport (`< _) negative-right $ <_+-left (negative delta) delta<eps
     \in unfolds $ uniform-refine (metricUniform $ half>0 $ half>0 d>0) $ later
          \lam {_} (inP (y,idp)) => \case real-located $ <_+-cancel-right (half (half d)) $ transport2 (<) (inv $ +-assoc *> pmap (_ +) half+half) (inv $ +-assoc *> pmap (_ +) negative-left *> zro-right) $ <_+-cancel-left (negative delta) $ transport2 (<) (inv (pmap (`+ _) negative-left *> zro-left) *> +-assoc) +-comm (half<id d>0) \with {
            | byLeft e => inP (_, byLeft idp, \lam {z} yz<d/4 xz<delta => <-irreflexive $ e <∘ dist-triang <∘r RealAbGroup.<_+ xz<delta (transport (`< _) dist-symm yz<d/4))
            | byRight e => inP (_, byRight idp, \lam {z} yz<d/4 => transport (_ <) (+-assoc *> pmap (_ +) negative-left *> zro-right) $ dist-triang <∘r RealAbGroup.<_+ e yz<d/4)
          }

\class MetricSpace \extends PseudoMetricSpace, LinearlyValuedMetricSpace

\record LocallyUniformMetricMap \extends LocallyUniformMap {
  \override Dom : PseudoMetricSpace
  \override Cod : PseudoMetricSpace

  | func-dist-locally-uniform : ∀ {eps : Real} (0 < eps) ∃ (delta : Real) (0 < delta) ∀ (x0 : Dom) ∃ (gamma : Real) (0 < gamma) ∀ {x x' : Dom} (dist x0 x < delta -> dist x x' < gamma -> dist (func x) (func x') < eps)
  | func-locally-uniform Eu => \case dist-uniform.1 Eu \with {
    | inP (eps,eps>0,h) => \case func-dist-locally-uniform eps>0 \with {
      | inP (delta,delta>0,g) => inP (_, metricUniform delta>0, \lam (inP (x0,p)) => \case g x0 \with {
        | inP (gamma,gamma>0,g') => dist-uniform.2 $ inP (gamma, gamma>0, \lam x => \case h (func x) \with {
          | inP (W,EW,e) => inP (\lam x' => dist x x' < gamma, inP $ later (W, EW, \lam {x'} c =>
              e $ rewrite (dist-symm {Cod}) $ g' (rewrite p in c.1) $ rewrite (dist-symm {Dom}) c.2
          ), \lam d => d)
        })
      })
    }
  }
} \where {
  \lemma fromLocallyUniformMap {X Y : PseudoMetricSpace} (f : LocallyUniformMap X Y) : LocallyUniformMetricMap X Y f \cowith
    | func-dist-locally-uniform eps>0 => \case f.func-locally-uniform (metricUniform $ half>0 eps>0) \with {
      | inP (C,Cu,h) => \case dist-uniform.1 Cu \with {
        | inP (delta,delta>0,g) => inP (half delta, half>0 delta>0, \lam x0 => \case g x0 \with {
          | inP (U,CU,e) => \case dist-uniform.1 (h CU) \with {
            | inP (gamma,gamma>0,g') => inP (gamma ∧ half delta, <_meet-univ gamma>0 (half>0 delta>0), \lam {x} {x'} d1 d2 => \case g' x \with {
              | inP (V, inP (W, inP (y, q), p), r) => rewrite q at p $ halving (p (e $ d1 <∘ half<id delta>0, r $ rewrite X.dist-refl gamma>0)) (p (e $ halving (rewrite X.dist-symm in d1) $ d2 <∘l meet-right, r $ d2 <∘l meet-left))
            })
          }
        })
      }
    }

  \lemma makeLocallyUniformMap2 {X Y Z : PseudoMetricSpace} (f : X -> Y -> Z) (fc : ∀ {eps : Real} (0 < eps) ∃ (delta : Real) (0 < delta) ∀ x0 y0 ∃ (gamma : Real) (0 < gamma) ∀ {x x'} {y y'} (dist x0 x < delta -> dist y0 y < delta -> dist x x' < gamma -> dist y y' < gamma -> dist (f x y) (f x' y') < eps))
    : LocallyUniformMap (X ⨯ Y) Z (\lam s => f s.1 s.2) \cowith
    | func-locally-uniform Eu => \case dist-uniform.1 Eu \with {
      | inP (eps,eps>0,h) => \case fc eps>0 \with {
        | inP (delta,delta>0,g) => inP (_, ProductUniformSpace.prodCover (metricUniform delta>0) (metricUniform delta>0), \lam {_} (inP (_, inP (x0,idp), _, inP (y0,idp), idp)) => \case g x0 y0 \with {
          | inP (gamma,gamma>0,g') => inP (_, metricUniform gamma>0, _, metricUniform gamma>0, \lam {_} (inP (_, inP (x,idp), _, inP (y,idp), idp)) => \case h (f x y) \with {
            | inP (W,EW,e) => inP (\lam s => \Sigma (dist x s.1 < gamma) (dist y s.2 < gamma), inP (W, EW, \lam {s} (c,d) => e $ rewrite Z.dist-symm $ g' c.1 c.2 (rewrite X.dist-symm d.1) (rewrite Y.dist-symm d.2)), \lam d => d)
          })
        })
      }
    }
}

\record UniformMetricMap \extends LocallyUniformMetricMap, UniformMap {
  \override Dom : PseudoMetricSpace
  \override Cod : PseudoMetricSpace

  | func-dist-uniform : ∀ {eps : Real} (0 < eps) ∃ (delta : Real) (0 < delta) ∀ {x x' : Dom} (dist x x' < delta -> dist (func x) (func x') < eps)
  | func-dist-locally-uniform eps>0 => \case func-dist-uniform eps>0 \with {
    | inP (delta,delta>0,h) => inP (delta, delta>0, \lam x0 => inP (delta, delta>0, \lam _ => h))
  }
  | func-uniform Eu => \case dist-uniform.1 Eu \with {
    | inP (eps,eps>0,h) => \case func-dist-uniform eps>0 \with {
      | inP (delta,delta>0,g) => dist-uniform.2 $ inP (delta, delta>0, \lam x => \case h (func x) \with {
        | inP (U,EU,e) => inP (_, inP $ later (U, EU, idp), \lam d => e (g d))
      })
    }
  }
} \where {
  \lemma fromUniformMap {X Y : PseudoMetricSpace} (f : UniformMap X Y) : UniformMetricMap X Y f \cowith
    | func-dist-uniform eps>0 => \case dist-uniform.1 $ f.func-uniform (metricUniform $ half>0 eps>0) \with {
      | inP (delta,delta>0,h) => inP (delta, delta>0, \lam {x} d => \case h x \with {
        | inP (U, inP (V, inP (y, q), p), g) => rewrite (p,q) at g $ halving (g $ rewrite X.dist-refl delta>0) (g d)
      })
    }
}

\record MetricMap \extends UniformMetricMap
  | func-dist {x y : Dom} : dist (func x) (func y) <= dist x y
  | func-dist-uniform {eps} eps>0 => inP (eps, eps>0, \lam d => func-dist <∘r d)
  | func-cont {U} => defaultImpl PrecoverMap func-cont {_} {U}

\record IsometricMap \extends MetricMap {
  | func-isometry {x y : Dom} : dist (func x) (func y) = dist x y
  | func-dist => Preorder.=_<= func-isometry

  \lemma dense->uniformEmbedding (d : IsDense) : UniformMap.IsDenseUniformEmbedding
    => (d, \lam Cu => \case dist-uniform.1 Cu \with {
      | inP (eps,eps>0,h) => dist-uniform.2 $ inP (half eps, half>0 eps>0, \lam y => \case d {y} OBall-open (OBall-center (half>0 eps>0)) \with {
        | inP (_, inP (x,idp), yfx<eps/2) => \case h x \with {
          | inP (U,CU,g) => inP (OBall (half eps) y, inP $ later (U, CU, \lam {x'} yfx'<eps/2 => g $ rewrite func-isometry in halving yfx<eps/2 yfx'<eps/2), \lam d => d)
        }
      })
    })
}

\class CompleteMetricSpace \extends MetricSpace, StronglyCompleteUniformSpace

\lemma cauchyFilter-metric-char {X : PseudoMetricSpace} {F : SetFilter X} : ∀ {C : isCauchy} ∃ (U : C) (F U) <->
  (\Pi {eps : Real} -> 0 < eps -> ∃ (x : X) (F (OBall eps x)))
  => <->trans cauchyFilter-uniform-char $ later (\lam f eps>0 => \case f $ metricUniform eps>0 \with {
    | inP (_, inP (x, idp), FB) => inP (x, FB)
  }, \lam f Cu => \case dist-uniform.1 Cu \with {
    | inP (eps,eps>0,h) => \case f eps>0 \with {
      | inP (x,FB) => \case h x \with {
        | inP (U,CU,g) => inP (U, CU, filter-mono FB (g __))
      }
    }
  })