\import Algebra.Monoid
\import Algebra.Ordered
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Order.Biordered
\import Order.Lattice
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Set.Filter
\import Set.Subset
\import Topology.CoverSpace
\import Topology.CoverSpace.StronglyComplete
\import Topology.TopSpace
\import Topology.UniformSpace

\class MetricValueOrder \extends BiorderedLatticeAbMonoid {
  | hasPositive : ∃ (a : E) (0 < a)
  | +_<-dense {a b : E} : a < b -> ∃ (d : E) (0 < d) (a + d < b)

  \lemma shrink2 {eps : E} (eps>0 : 0 < eps) : ∃ (delta : E) (0 < delta) (delta < eps) (delta + delta < eps)
    => \case +_<-dense eps>0 \with {
      | inP (delta,delta>0,p) =>
        \have delta<eps => transport (`< _) zro-left p
        \in \case +_<-dense delta<eps \with {
          | inP (delta',delta'>0,delta+delta'<eps) => inP (delta ∧ delta', <_meet-univ delta>0 delta'>0, meet-left <∘r delta<eps, <=_+ meet-left meet-right <∘r delta+delta'<eps)
        }
    }
}

\class ValuedPseudoMetricSpace (V : MetricValueOrder) \extends UniformSpace {
  | dist : E -> E -> V
  | dist-refl {x : E} : dist x x = 0
  | dist-symm {x y : E} : dist x y = dist y x
  | dist-triang {x y z : E} : dist x z <= dist x y + dist y z
  | dist-uniform {C : Set (Set E)} : isUniform C <-> ∃ (eps : V) (0 < eps) ∀ x ∃ (U : C) ∀ {y} (dist x y < eps -> U y)

  | uniform-cover Cu x => \case dist-uniform.1 Cu \with {
    | inP (eps,eps>0,h) => \case h x \with {
      | inP (U,CU,g) => inP (U, CU, g $ rewrite dist-refl eps>0)
    }
  }
  | uniform-top => dist-uniform.2 \case hasPositive \with {
    | inP (a,a>0) => inP (a, a>0, \lam x => inP (Bounded.top, idp, \lam _ => ()))
  }
  | uniform-refine Cu e => \case dist-uniform.1 Cu \with {
    | inP (eps,eps>0,h) => dist-uniform.2 $ inP (eps, eps>0, \lam x => \case h x \with {
      | inP (U,CU,g) => \case e CU \with {
        | inP (V,DV,U<=V) => inP (V, DV, \lam d => U<=V $ g d)
      }
    })
  }
  | uniform-inter Cu C'u => \case dist-uniform.1 Cu, dist-uniform.1 C'u \with {
    | inP (eps,eps>0,h), inP (eps',eps'>0,h') => dist-uniform.2 $ inP (eps ∧ eps', <_meet-univ eps>0 eps'>0, \lam x => \case h x, h' x \with {
      | inP (U,CU,g), inP (U',DU',g') => inP (U ∧ U', inP $ later (U, CU, U', DU', idp), \lam d => (g $ d <∘l meet-left, g' $ d <∘l meet-right))
    })
  }
  | uniform-star Cu => \case dist-uniform.1 Cu \with {
    | inP (eps,eps>0,h) => \case V.shrink2 eps>0 \with {
      | inP (delta',delta'>0,_,delta'+delta'<eps) => \case V.shrink2 delta'>0 \with {
        | inP (delta,delta>0,delta<delta',delta+delta<delta') => inP (\lam U => ∃ (x : E) (U = \lam y => dist x y < delta), dist-uniform.2 $ inP (delta, delta>0, \lam x => inP $ later (_, inP (x, idp), \lam d => d)), \lam {_} (inP (x,idp)) => \case h x \with {
          | inP (U,CU,g) => inP (U, CU, \lam {_} (inP (y,idp)) s {z} d => g $ dist-triang <∘r <=_+ (dist-triang <=∘ <=_+ (<=-less s.2.1) (<=-less $ transport (`< _) dist-symm s.2.2) <=∘ <=-less delta+delta<delta') (LinearOrder.<=-less $ d <∘ delta<delta') <∘r delta'+delta'<eps)
        })
      }
    }
  }

  \default isUniform C : \Prop => ∃ (eps : V) (0 < eps) ∀ x ∃ (U : C) ∀ {y} (dist x y < eps -> U y)
  \default dist-uniform \as dist-uniform-impl {C} : isUniform C <-> _ => <->refl

  \lemma metricProperUniform : IsProperUniform
    => \lam Cu => \case dist-uniform.1 Cu \with {
      | inP (eps,eps>0,h) => dist-uniform.2 $ inP (eps, eps>0, \lam x => \case h x \with {
        | inP (U,CU,g) => inP (U, later (CU, inP (x, g $ rewrite dist-refl eps>0)), g)
      })
    }

  \lemma metricUniform {eps : V} (eps>0 : 0 < eps) : UniformSpace.isUniform \lam U => ∃ (x : E) (U = \lam y => dist x y < eps)
    => dist-uniform.2 $ inP $ later (eps, eps>0, \lam x => inP (_, inP (x, idp), \lam r => r))

  \func NFilter (x : E) : SetFilter E \cowith
    | F U => ∃ (eps : V) (0 < eps) (VOBall eps x ⊆ U)
    | filter-mono (inP (eps,eps>0,q)) p => inP (eps, eps>0, q <=∘ p)
    | filter-top => \case hasPositive \with {
      | inP (a,a>0) => inP (a, a>0, \lam _ => ())
    }
    | filter-meet (inP (eps,eps>0,p)) (inP (eps',eps'>0,p')) => inP (eps ∧ eps', <_meet-univ eps>0 eps'>0, \lam d => (p $ d <∘l meet-left, p' $ d <∘l meet-right))
}

\func VOBall {X : ValuedPseudoMetricSpace} (eps : X.V) (x : X) : Set X
  => \lam y => dist x y < eps

\lemma OBall-center {X : ValuedPseudoMetricSpace} {eps : X.V} (eps>0 : 0 < eps) {x : X} : VOBall eps x x
  => transportInv (`< _) dist-refl eps>0

\lemma OBall-open {X : ValuedPseudoMetricSpace} {eps : X.V} {x : X} : isOpen (VOBall eps x)
  => cauchy-open.2 \lam {y} xy<eps => \case +_<-dense xy<eps \with {
    | inP (delta,delta>0,xy+delta<eps) => \case X.V.shrink2 delta>0 \with {
      | inP (delta',delta'>0,delta'<delta,delta'+delta'<delta) => X.makeCauchy $ uniform-refine (X.metricUniform delta'>0) \lam {_} (inP (z,idp)) => inP (_, later \lam zy<delta' {w} zw<delta' => dist-triang <∘r <=_+ <=-refl (dist-triang {_} {_} {z} <=∘ <=_+ (<=-less $ transport (`< _) dist-symm zy<delta') (<=-less zw<delta') <=∘ <=-less delta'+delta'<delta) <∘r xy+delta<eps, <=-refl)
    }
  }

\lemma OBall-center_<=< {X : ValuedPseudoMetricSpace} {eps : X.V} (eps>0 : 0 < eps) {x : X} : single x <=< VOBall eps x
  => X.open-char.1 OBall-open (OBall-center eps>0)

\lemma dist_open {X : ValuedPseudoMetricSpace} {U : Set X} : isOpen U <-> ∀ {x : U} ∃ (eps : X.V) (0 < eps) (VOBall eps x ⊆ U)
  => (\lam Uo {x} Ux => \case cauchy-ball (cauchy-open.1 Uo Ux) x \with {
    | inP (eps,eps>0,V,h,p) => inP (eps, eps>0, p <=∘ h (p $ OBall-center eps>0))
  }, \lam f => X.cover-open \lam Ux => \case f Ux \with {
    | inP (eps,eps>0,h) => inP (_, OBall-open, OBall-center eps>0, h)
  })

\lemma cauchy-ball {X : ValuedPseudoMetricSpace} {C : Set (Set X)} (Cc : isCauchy C) (x : X) : ∃ (eps : X.V) (0 < eps) (U : C) (VOBall eps x ⊆ U)
  => \case ClosurePrecoverSpace.closure-filter (X.NFilter x) (\lam {D} Du => \case dist-uniform.1 Du \with {
    | inP (eps,eps>0,h) => \case h x \with {
      | inP (U,DU,p) => inP (U, DU, inP (eps, eps>0, p __))
    }
  }) (uniform-cauchy.1 Cc) \with {
    | inP (U, CU, inP (eps,eps>0,p)) => inP (eps, eps>0, U, CU, p)
  }

\lemma <=<-ball {X : ValuedPseudoMetricSpace} {x : X} {U : Set X} (x<=<U : single x <=< U) : ∃ (eps : X.V) (0 < eps) (VOBall eps x ⊆ U)
  => \case cauchy-ball (unfolds in x<=<U) x \with {
    | inP (eps,eps>0,V,h,p) => inP (eps, eps>0, p <=∘ h (x, (idp, p $ OBall-center eps>0)))
  }

\lemma OBall_<=* {X : ValuedPseudoMetricSpace} {x : X} {eps delta : X.V} (delta<eps : delta < eps) : VOBall delta x <=* VOBall eps x
  => \case +_<-dense delta<eps \with {
    | inP (d,d>0,delta+d<eps) => \case X.V.shrink2 d>0 \with {
      | inP (e,e>0,e<d,e+e<d) => inP (_, X.metricUniform e>0, \lam {w} (inP (_, (inP (y,idp), (z,(xz<delta,yz<e))), yw<e)) =>
          dist-triang <∘r <=_+ (<=-less xz<delta) (dist-triang {_} {_} {y} <=∘ <=_+ (<=-less $ transport (`< _) dist-symm yz<e) (<=-less yw<e) <=∘ <=-less e+e<d) <∘r delta+d<eps)
    }
  }

\func IsBoundedSet {X : ValuedPseudoMetricSpace} (S : Set X) : \Prop
  => ∃ (B : X.V) (0 < B) ∀ {x y : S} (dist x y < B)

\class MetricValueLinearOrder \extends MetricValueOrder, LinearlyBiorderedAbMonoid

\class LinearlyValuedPseudoMetricSpace \extends ValuedPseudoMetricSpace, StronglyRegularUniformSpace {
  \override V : MetricValueLinearOrder
  | uniform-strongly-star Cu =>
    \have | (inP (eps,eps>0,h)) => dist-uniform.1 Cu
          | (inP (eps1,eps1>0,_,eps1+eps1<eps)) => V.shrink2 eps>0
          | (inP (eps2,eps2>0,eps2<eps1,eps2+eps2<eps1)) => V.shrink2 eps1>0
          | (inP (eps3,eps3>0,eps3<eps2,eps3+eps3<eps2)) => V.shrink2 eps2>0
    \in inP (\lam U => ∃ (x : E) (U = \lam y => dist x y < eps3), dist-uniform.2 $ inP (eps3, eps3>0, \lam x => inP $ later (_, inP (x,idp), \lam d => d)), \lam {_} (inP (x,idp)) => \case h x \with {
      | inP (U,CU,g) => inP (U, CU, \lam {_} (inP (y,idp)) => \case <-comparison (dist x y) eps2<eps1 \with {
        | byLeft xy>eps2 => byLeft \lam (z,(xz<eps3,yz<eps3)) => <-irreflexive $ xy>eps2 <∘ dist-triang <∘r <=_+ (<=-less xz<eps3) (<=-less $ transport (`< _) dist-symm yz<eps3) <∘r eps3+eps3<eps2
        | byRight xy<eps1 => byRight \lam {z} yz<eps3 => g $ dist-triang <∘r <=_+ (<=-less xy<eps1) (<=-less $ yz<eps3 <∘ eps3<eps2 <∘ eps2<eps1) <∘r eps1+eps1<eps
      })
    })
}

\lemma dist>=0 {X : LinearlyValuedPseudoMetricSpace} {x y : X} : 0 <= dist x y
  => \have xy+xy>=0 => rewrite (dist-refl,dist-symm) in dist-triang {_} {y} {x} {y}
     \in \lam xy<0 => <-irreflexive $ xy<0 <∘l xy+xy>=0 <=∘ transport (_ <=) zro-right (<=_+ <=-refl $ <=-less xy<0)

\class LinearlyValuedMetricSpace \extends LinearlyValuedPseudoMetricSpace, StronglySeparatedCoverSpace
  | dist-ext {x y : E} : dist x y = 0 -> x = y
  | isSeparatedCoverSpace f => dist-ext $ <=-antisymmetric (\lam xy>0 => \case V.shrink2 xy>0 \with {
    | inP (eps,eps>0,_,eps+eps<xy) => \case f $ makeCauchy $ metricUniform eps>0 \with {
      | inP (_, inP (z,idp), (zx<eps,zy<eps)) => <-irreflexive $ dist-triang <∘r <=_+ (<=-less $ transport (`< _) dist-symm zx<eps) (<=-less zy<eps) <∘r eps+eps<xy
    }
  }) dist>=0