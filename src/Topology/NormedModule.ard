\import Algebra.Group
\import Algebra.Meta
\import Algebra.Module
\import Algebra.Monoid
\import Algebra.Ordered
\import Algebra.Ring
\import Algebra.Semiring
\import Arith.Real
\import Arith.Real.Field
\import Function.Meta
\import Logic
\import Meta
\import Order.Biordered
\import Order.Lattice
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Topology.MetricSpace
\import Topology.NormedAbGroup
\import Topology.NormedAbGroup.ValuedNormedAbGroup
\import Topology.NormedRing
\import Topology.TopModule
\import Topology.UniformSpace
\import Topology.UniformSpace.Product
\open LinearlyOrderedAbMonoid
\open LinearlyOrderedSemiring

\class PseudoNormedLModule \extends LModule, PseudoNormedAbGroup, TopLModule {
  \override R : PseudoNormedRing
  | norm_*c {a : R} {x : E} : norm (a *c x) = norm {R} a * norm x
  | *c-cont => *c-locally-uniform \lam {a} {x} => Preorder.=_<= norm_*c
} \where {
    \protected \lemma *c-locally-uniform {R : PseudoNormedRing} {A : LModule R} {X : PseudoNormedAbGroup A { | zro => A.zro | + => + | negative => negative }} (norm_*c_<= : \Pi {x : R} {a : A} -> norm (x *c a) <= norm x * norm a) : LocallyUniformMap (ProductUniformSpace R X) X (\lam s => s.1 *c s.2)
      => LocallyUniformMetricMap.makeLocallyUniformMap2 (*c) \lam {eps} eps>0 => inP (1, RealAbGroup.zro<ide, \lam x0 a0 =>
          \let | lem : 0 < norm x0 + norm a0 + 3 => linarith $ usingOnly (norm>=0 {_} {x0}, norm>=0 {_} {a0})
               | gamma => (RealField.pinv lem * eps) ∧ 1
               | gamma>0 : 0 < gamma => <_meet-univ (RealField.<_*_positive_positive (RealField.pinv>0 lem) eps>0) zro<ide
          \in inP (gamma, gamma>0, \lam {x} {x'} {a} {a'} x0x<1 a0a<1 xx'<gamma aa'<gamma =>
              rewrite norm-dist at xx'<gamma $ rewrite norm-dist at aa'<gamma $ rewrite norm-dist at x0x<1 $ rewrite norm-dist at a0a<1 $ rewrite norm-dist $
              \have t : norm (x *c (a - a') + (x - x') *c a') < eps => norm_+ <∘r <=_+ norm_*c_<= norm_*c_<= <∘r
                  <=_+ (<=_*_positive-right norm>=0 $ LinearOrder.<_<= aa'<gamma) (<=_*_positive-left (LinearOrder.<_<= xx'<gamma) norm>=0) <∘r
                  rewrite {2} *-comm (transport (`< _) rdistr $ <_*_positive-left (hiding norm_*c_<= $ linarith (norm_-right {_} {x0} {x}, norm_-right {_} {a0} {a}, norm_-right {_} {a} {a'}, meet-right : gamma <= 1) : norm x + norm a' < norm x0 + norm a0 + 3) gamma>0 <∘l
                    <=_*_positive-right (LinearOrder.<_<= lem) meet-left <=∘ Preorder.=_<= (inv *-assoc *> pmap (`* _) (OrderedField.pinv-right lem) *> ide-left))
              \in (rewrite (A.*c-ldistr_-, A.*c-rdistr_-, +-assoc), rewriteI {2} +-assoc, rewrite (negative-left,zro-left)) in t))
}

\lemma *c-locally-uniform {X : PseudoNormedLModule} : LocallyUniformMap (ProductUniformSpace X.R X) X (\lam s => s.1 *c s.2)
  => PseudoNormedLModule.*c-locally-uniform \lam {a} {x} => Preorder.=_<= norm_*c

\class NormedLModule \extends PseudoNormedLModule, NormedAbGroup, HausdorffTopLModule {
  \override R : PseudoNormedRing
}

\class CompleteNormedLModule \extends NormedLModule, CompleteNormedAbGroup

\lemma norm_ide=0-module {R : PseudoNormedRing} {X : PseudoNormedLModule R} (p : R.norm 1 = (0 : Real)) {x : X} : norm x = (0 : Real)
  => pmap norm (inv ide_*c) *> norm_*c *> pmap (`* _) p *> Ring.zro_*-left
