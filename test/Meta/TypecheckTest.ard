\import Data.Bool
\import Function.Meta
\import Meta
\import Meta.ConcreteExpr

\lemma lamTest : typecheck (lamExpr (true, defRef ``Nat) (localVar 0)) = (\lam (x : Nat) => x) => idp

\lemma lamTest2 : typecheck (lamExpr (false, defRef ``Nat) (localVar 0)) = (\lam {x : Nat} => x) => idp

\lemma lamTest3 : typecheck (lamExpr (true, defRef ``Nat) $ lamExpr (true, defRef ``Nat) (localVar 0)) = (\lam (x y : Nat) => y) => idp

\lemma lamTest4 : typecheck (lamExpr (true, defRef ``Nat) $ lamExpr (true, defRef ``Nat) (localVar 1)) = (\lam (x y : Nat) => x) => idp

\lemma piTest : typecheck (piExpr (false, defRef ``Nat) (appExpr (appExpr (defRef ``=) (localVar 0) true) (localVar 0) true)) = (\Pi {x : Nat} -> x = x) => idp

\lemma numberTest : typecheck (numberExpr 7) = 7 => idp

\lemma stringTest : typecheck (stringExpr "foo") = "foo" => idp

\lemma qnameTest : typecheck (qNameExpr ``Nat) = ``Nat => idp

\lemma boxTest {A : \Prop} (a : A) : typecheck (boxExpr (localVar 0)) = \box a => idp

\func levelTest : typecheck (universeExpr (stdLevel pLevel) (numberLevel 0)) = (\Set \lp) => idp

\func levelTest2 \plevels p1 >= p2 : typecheck (universeExpr (varLevel 0 pLevel) (numberLevel 0)) = (\Set p1) => idp

\func levelTest3 \plevels p1 >= p2 : typecheck (universeExpr (varLevel 1 pLevel) (numberLevel 0)) = (\Set p2) => idp

\func levelTest4 \hlevels h1 <= h2 => fails (idp : typecheck (universeExpr (varLevel 1 hLevel) (numberLevel 0)) = (\Type 0 h2))

\func levelTest5 \hlevels h1 <= h2 : typecheck (universeExpr (numberLevel 0) (varLevel 1 hLevel)) = (\Type 0 h2) => idp
