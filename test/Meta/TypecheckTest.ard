\import Data.Bool
\import Data.Maybe
\import Data.Or
\import Function.Meta
\import Meta
\import Meta.ConcreteExpr

\lemma lamTest : typecheck (lamExpr (true, defRef ``Nat) (localVar 0)) = (\lam (x : Nat) => x) => idp

\lemma lamTest2 : typecheck (lamExpr (false, defRef ``Nat) (localVar 0)) = (\lam {x : Nat} => x) => idp

\lemma lamTest3 : typecheck (lamExpr (true, defRef ``Nat) $ lamExpr (true, defRef ``Nat) (localVar 0)) = (\lam (x y : Nat) => y) => idp

\lemma lamTest4 : typecheck (lamExpr (true, defRef ``Nat) $ lamExpr (true, defRef ``Nat) (localVar 1)) = (\lam (x y : Nat) => x) => idp

\lemma piTest : typecheck (piExpr (false, defRef ``Nat) (appExpr (appExpr (defRef ``=) (localVar 0) true) (localVar 0) true)) = (\Pi {x : Nat} -> x = x) => idp

\lemma numberTest : typecheck (numberExpr 7) = 7 => idp

\lemma stringTest : typecheck (stringExpr "foo") = "foo" => idp

\lemma qnameTest : typecheck (qNameExpr ``Nat) = ``Nat => idp

\lemma boxTest {A : \Prop} (a : A) : typecheck (boxExpr (localVar 0)) = \box a => idp

\func levelTest : typecheck (universeExpr (stdLevel pLevel) (numberLevel 0)) = (\Set \lp) => idp

\func levelTest2 \plevels p1 >= p2 : typecheck (universeExpr (varLevel 0 pLevel) (numberLevel 0)) = (\Set p1) => idp

\func levelTest3 \plevels p1 >= p2 : typecheck (universeExpr (varLevel 1 pLevel) (numberLevel 0)) = (\Set p2) => idp

\func levelTest4 \hlevels h1 <= h2 => fails (idp : typecheck (universeExpr (varLevel 1 hLevel) (numberLevel 0)) = (\Type 0 h2))

\func levelTest5 \hlevels h1 <= h2 : typecheck (universeExpr (numberLevel 0) (varLevel 1 hLevel)) = (\Type 0 h2) => idp

\lemma tupleTest : typecheck (tupleExpr $ numberExpr 3 :: numberExpr 7 :: nil) = (3,7) => idp

\lemma projTest (p : \Sigma Nat Nat) : typecheck (projExpr (localVar 0) 0) = p.1 => idp

\lemma projTest2 (p : \Sigma Nat Nat) : typecheck (projExpr (localVar 0) 1) = p.2 => idp

\lemma projTest3 (p : \Sigma Nat Nat) => fails $ typecheck (projExpr (localVar 0) 2)

\func sigmaTest : typecheck (sigmaExpr $ defRef ``Nat :: appExpr (appExpr (defRef ``=) (localVar 0) true) (localVar 0) true :: nil) = (\Sigma (x : Nat) (x = x)) => idp

\lemma caseTest (x y : Nat) : typecheck (caseExpr true ((inl (localVar 1, false), nothing) :: (inl (localVar 0, false), nothing) :: nil) nothing nothing $
                                          (conPattern ``zero nil :: namePattern false nothing :: nil, just $ numberExpr 3) ::
                                          (namePattern false nothing :: conPattern ``suc (namePattern true nothing :: nil) :: nil, just $ localVar 0) ::
                                          (namePattern true nothing :: namePattern false nothing :: nil, just $ localVar 0) :: nil) =
                                        (\case x, y \with { | 0, _ => 3 | _, suc y => y | x, _ => x }) => idp

\lemma caseTest2 (x : Nat) : typecheck (caseExpr true ((inr 0, nothing) :: nil) nothing nothing $
                                        (conPattern ``zero nil :: nil, just $ defRef ``idp) ::
                                        (conPattern ``suc (namePattern false nothing :: nil) :: nil, just $ defRef ``idp) :: nil) = {x = x}
                                       (\case \elim x \with { | 0 => idp | suc _ => idp }) => idp

\lemma caseTest3 (x : Nat) : typecheck (caseExpr true ((inl (localVar 0, true), nothing) :: nil) (just $ appExpr (appExpr (defRef ``=) (localVar 0) true) (localVar 0) true) nothing $
                                        (conPattern ``zero nil :: nil, just $ defRef ``idp) ::
                                        (conPattern ``suc (namePattern false nothing :: nil) :: nil, just $ defRef ``idp) :: nil) =
                                       (\case x \as x \return x = x \with { | 0 => idp | suc _ => idp }) => idp

\lemma caseTest4 (b : Bool) : typecheck (caseExpr true ((inl (localVar 0, true), nothing) :: (inl (defRef ``idp, false), just (appExpr (appExpr (defRef ``=) (localVar 1) true) (localVar 0) true)) :: nil) nothing nothing $
                                          (conPattern ``true nil :: namePattern true nothing :: nil, just $ appExpr (defRef ``inl) (localVar 0) true) ::
                                          (conPattern ``false nil :: namePattern true nothing :: nil, just $ appExpr (defRef ``inr) (localVar 0) true) :: nil) = {Or (b = true) (b = false)}
                                        (\case b \as x, idp : b = x \with { | true, p => inl p | false, p => inr p }) => idp
