\import Data.Maybe
\import Function
\import Meta
\import Reflect.ConcreteExpr
\import Reflect.IO
\import Reflect.IO.Meta
\import Reflect.Meta (reflect, typecheck)

\func test1 : (\let t : Nat => runIO (do {
  type <- getExpectedType,
  pushObject "A" (maybe holeExpr id type),
  return 0
}) \in runIO (popObject "A")) = reflect (Nat \levels () ()) => idp

\func test2 : (\let t => runIO getExpectedType \in t) = nothing => idp

\func test3 : typecheck (\let t : _ => runIO (do {
  type <- getExpectedType,
  pushObject "A" (maybe holeExpr id type),
  return 0
}) \in runIO (popObject "A")) = Nat => idp
